{"version":3,"file":"fjl-validator-recaptcha.mjs","sources":["../../node_modules/fjl/dist/es6-module/fjl.mjs","../../node_modules/fjl-validator/dist/es6-module/fjl-validator.mjs","../../src/fjlReCaptchaValidator.js"],"sourcesContent":["/**\r\n * @author elydelacruz\r\n * @created 12/6/2016.\r\n * @memberOf function\r\n * @description \"Curry strict\" and \"curry arbitrarily\" functions (`curry`, `curryN`).\r\n */\n\n/**\r\n * @private\r\n * @type {string}\r\n */\nconst\n/**\r\n * Returns curried function.\r\n * @private\r\n * @param executeArity {Number}\r\n * @param unmetArityNum {Number}\r\n * @param fn {Function}\r\n * @param argsToCurry {...*}\r\n * @returns {Function} - Curried function.\r\n */\nreturnCurried = (executeArity, unmetArityNum, fn, argsToCurry) => {\n  switch (unmetArityNum) {\n    case 1:\n      /* eslint-disable */\n      return function func(x) {\n        /* eslint-enable */\n        return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\n      };\n\n    case 2:\n      /* eslint-disable */\n      return function func(a, b) {\n        /* eslint-enable */\n        return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\n      };\n\n    case 3:\n      /* eslint-disable */\n      return function func(a, b, c) {\n        /* eslint-enable */\n        return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\n      };\n\n    case 4:\n      /* eslint-disable */\n      return function func(a, b, c, d) {\n        /* eslint-enable */\n        return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\n      };\n\n    case 5:\n      /* eslint-disable */\n      return function func(a, b, c, d, e) {\n        /* eslint-enable */\n        return executeAsCurriedFunc(fn, executeArity, unmetArityNum, Array.from(arguments), argsToCurry);\n      };\n\n    default:\n      return (...args) => executeAsCurriedFunc(fn, executeArity, unmetArityNum, args, argsToCurry);\n  }\n},\n\n/**\r\n * Returns curried function if unmetArity is not met else returns result of executing\r\n * final function.\r\n * @private\r\n * @param fn {Function}\r\n * @param executeArity {Number}\r\n * @param unmetArity {Number}\r\n * @param args {Array<*>}\r\n * @param argsToCurry {Array<*>}\r\n * @returns {Function|*} - Curried function or result of 'finally' executed function.\r\n */\nexecuteAsCurriedFunc = (fn, executeArity, unmetArity, args, argsToCurry) => {\n  let concatedArgs = argsToCurry.concat(args),\n      canBeCalled = concatedArgs.length >= executeArity || !executeArity,\n      newExpectedArity = executeArity - concatedArgs.length;\n  return !canBeCalled ? returnCurried(executeArity, newExpectedArity, fn, concatedArgs) : fn(...concatedArgs);\n};\n\nconst \n/**\r\n * Curries a function up to a given arity.\r\n * @function module:function.curryN\r\n * @param executeArity {Number}\r\n * @param fn {Function}\r\n * @param argsToCurry {...*}\r\n * @returns {Function}\r\n * @throws {Error} - When `fn` is not a function.\r\n */\ncurryN = (executeArity, fn, ...argsToCurry) => {\n  if (!fn || !(fn instanceof Function)) {\n    throw new Error(`\\`curry*\\` functions expect first parameter to be of type \\`Function\\` though received ${fn}?`);\n  }\n\n  return returnCurried(executeArity, executeArity - argsToCurry.length, fn, argsToCurry);\n},\n\n/**\r\n * Curries a function based on it's defined arity (note: rest args param (`...rest`) are not counted in arity).\r\n * @function module:function.curry\r\n * @param fn {Function}\r\n * @param argsToCurry {...*}\r\n * @returns {Function}\r\n */\ncurry = (fn, ...argsToCurry) => curryN((fn || {}).length, fn, ...argsToCurry),\n\n/**\r\n * Curries a function up to an arity of 2 (won't call function until 2 or more args).\r\n * @function module:function.curry2\r\n * @param fn {Function}\r\n * @returns {Function}\r\n */\ncurry2 = fn => curryN(2, fn),\n\n/**\r\n * Curries a function up to an arity of 3 (won't call function until 3 or more args).\r\n * @function module:function.curry3\r\n * @param fn {Function}\r\n * @returns {Function}\r\n */\ncurry3 = fn => curryN(3, fn),\n\n/**\r\n * Curries a function up to an arity of 4 (won't call function until 4 or more args).\r\n * @function module:function.curry4\r\n * @param fn {Function}\r\n * @returns {Function}\r\n */\ncurry4 = fn => curryN(4, fn),\n\n/**\r\n * Curries a function up to an arity of 5 (won't call function until 5 or more args).\r\n * @function module:function.curry5\r\n * @param fn {Function}\r\n * @returns {Function}\r\n */\ncurry5 = fn => curryN(5, fn);\n\n/**\r\n * @module utils\r\n */\nconst \n/**\r\n * Returns a function that takes an argument and an object on which to execute 'method name'\r\n * with said parameters.\r\n * @function module:utils.fPureTakesOne\r\n * @param name {String}\r\n * @returns {Function}\r\n */\nfPureTakesOne = name => curry((arg, f) => f[name](arg)),\n\n/**\r\n * Returns a function that takes 2 arguments and an object on which to execute 'method name'\r\n * with said parameters.\r\n * @function module:utils.fPureTakes2\r\n * @param name {String}\r\n * @returns {Function}\r\n */\nfPureTakes2 = name => curry((arg1, arg2, f) => f[name](arg1, arg2)),\n\n/**\r\n * Returns a function that takes 3 arguments and an object on which to execute 'method name'\r\n * with said parameters.\r\n * @function module:utils.fPureTakes3\r\n * @param name {String}\r\n * @returns {Function}\r\n */\nfPureTakes3 = name => curry((arg1, arg2, arg3, f) => f[name](arg1, arg2, arg3)),\n\n/**\r\n * Returns a function that takes 4 arguments and an object on which to execute 'method name'\r\n * with said parameters.\r\n * @function module:utils.fPureTakes4\r\n * @param name {String}\r\n * @returns {Function}\r\n */\nfPureTakes4 = name => curry((arg1, arg2, arg3, arg4, f) => f[name](arg1, arg2, arg3, arg4)),\n\n/**\r\n * Returns a function that takes 5 arguments and an object on which to execute 'method name'\r\n * with said parameters.\r\n * @function module:utils.fPureTakes5\r\n * @param name {String}\r\n * @returns {Function}\r\n */\nfPureTakes5 = name => curry((arg1, arg2, arg3, arg4, arg5, f) => f[name](arg1, arg2, arg3, arg4, arg5)),\n\n/**\r\n * Returns a function that takes an object and one or more arguments on which to execute 'method name'\r\n * with said parameters.\r\n * @function module:utils.fPureTakesOneOrMore\r\n * @param name {String}\r\n * @returns {Function}\r\n */\nfPureTakesOneOrMore = name => curry2((f, ...args) => f[name](...args));\n\n/**\r\n * Created by elyde on 7/20/2017.\r\n * Functional versions of common array methods (`map`, `filter`, etc.) (un-curried);\r\n */\n\nconst\n/**\r\n * Array.prototype.reverse generator (generates a function that calls the prototype version or a\r\n * shimmed version if it doesn't exist).\r\n * @returns {Function}\r\n */\ndefineReverse = () => Array.prototype.reverse ? x => x.reverse() : x => x.reduceRight((agg, item) => {\n  agg.push(item);\n  return agg;\n}, []);\n\nconst \n/**\r\n * Maps a function to functor (list etc.).\r\n * @function module:jsPlatform.map\r\n * @param fn {Function}\r\n * @param functor {Array|{map: {Function}}}\r\n * @returns {Array|{map: {Function}}}\r\n */\nmap = fPureTakesOne('map'),\n\n/**\r\n * Filters a functor (list etc.) with passed in function.\r\n * @function module:jsPlatform.filter\r\n * @param fn {Function}\r\n * @param functor {Array|{filter: {Function}}}\r\n * @returns {Array|{filter: {Function}}}\r\n */\nfilter = fPureTakesOne('filter'),\n\n/**\r\n * Reduces a foldable (list etc.) with passed in function.\r\n * @function module:jsPlatform.reduce\r\n * @param fn {Function}\r\n * @param functor {Array|{reduce: {Function}}}\r\n * @returns {Array|{reduce: {Function}}}\r\n */\nreduce = fPureTakes2('reduce'),\n\n/**\r\n * Reduces a foldable (list etc.) from the right with passed in function.\r\n * @function module:jsPlatform.reduceRight\r\n * @param fn {Function}\r\n * @param functor {Array|{reduceRight: {Function}}}\r\n * @returns {Array|{reduceRight: {Function}}}\r\n */\nreduceRight = fPureTakes2('reduceRight'),\n\n/**\r\n * For each on functor (Array|Object|etc.).\r\n * @function module:jsPlatform.forEach\r\n * @param fn {Function}\r\n * @param functor {Array|Object|*}\r\n * @return {*|Array|Object} - The type of object you pass in unless it doesn't have a `forEach` method.\r\n * @throws {Error} - When passed in functor doesn't have a `forEach` method.\r\n */\nforEach = fPureTakesOne('forEach'),\n\n/**\r\n * Returns `true` if `fn` (predicate) returns true for at least one item\r\n * in functor else returns `false`.\r\n * @param fn {Function} - Predicate.\r\n * @param functor {Array|Object|*}\r\n * @return {*|Array|Object} - The type passed.\r\n * @throws {Error} - When passed in object doesn't have a `some` method.\r\n */\nsome = fPureTakesOne('some'),\n\n/**\r\n * Returns `true` if `fn` (predicate) returns true for all items in functor else returns `false`.\r\n * @function module:jsPlatform.every\r\n * @param fn {Function} - Predicate.\r\n * @param functor {Array|Object|*}\r\n * @return {*|Array|Object} - The type passed.\r\n * @throws {Error} - When passed in object doesn't have an `every` method.\r\n */\nevery = fPureTakesOne('every'),\n\n/**\r\n * Array.prototype.join\r\n * @function module:jsPlatform.join\r\n * @param separator {String|RegExp}\r\n * @param arr {Array}\r\n * @returns {String}\r\n */\njoin = fPureTakesOne('join'),\n\n/**\r\n * Same as Array.prototype.push\r\n * @function module:jsPlatform.push\r\n * @param item {*}\r\n * @param arr {Array}\r\n * @returns {Number}\r\n */\npush = fPureTakesOneOrMore('push'),\n\n/**\r\n * Reverses an list (shimmed if not exists).\r\n * @function module:jsPlatform.reverse\r\n * @param x {Array<any>}\r\n * @return {Array}\r\n */\nreverse = defineReverse();\n\n/**\r\n * Created by elydelacruz on 9/7/2017.\r\n */\n\nconst \n/**\r\n * Functional `apply` function (takes no context).\r\n * @function module:function.apply\r\n * @param fn {Function}\r\n * @param args {Array|*}\r\n * @returns {*}\r\n */\napply = curry((fn, args) => fn.apply(null, args)),\n\n/**\r\n * Functional `call` function (takes no context).\r\n * @function module:function.call\r\n * @param fn {Function}\r\n * @param args {...*}\r\n * @returns {*}\r\n */\ncall = curry2((fn, ...args) => fn.call(null, ...args));\n\nconst \n/**\r\n * Returns a curried function requiring given functions arguments in reverse\r\n * (returned function expects 2 or more variables (curried at 2 or more args)).\r\n * @function module:function.flipN\r\n * @param fn {Function}\r\n * @returns {Function}\r\n * @curried\r\n */\nflipN = fn => curry2((...args) => apply(fn, reverse(args))),\n\n/**\r\n * Flips a function's first and second arguments and and returns a new function requiring said arguments in reverse.\r\n * @function module:function.flip\r\n * @param fn {Function}\r\n * @returns {Function}\r\n */\nflip = fn => curry((b, a) => call(fn, a, b)),\n\n/**\r\n * Same as `flip` except returns a flipped function of arity 3.\r\n * @function module:function.flip3\r\n * @param fn {Function}\r\n * @returns {Function}\r\n */\nflip3 = fn => curry((c, b, a) => call(fn, a, b, c)),\n\n/**\r\n * Same as `flip` except returns a flipped function of arity 4.\r\n * @function module:function.flip4\r\n * @param fn {Function}\r\n * @returns {Function}\r\n */\nflip4 = fn => curry((d, c, b, a) => call(fn, a, b, c, d)),\n\n/**\r\n * Same as `flip` except returns a flipped function of arity 5.\r\n * @function module:function.flip5\r\n * @param fn {Function}\r\n * @returns {Function}\r\n */\nflip5 = fn => curry((e, d, c, b, a) => call(fn, a, b, c, d, e));\n\n/**\r\n * @description Defines some of the platform methods for objects (the ones used within `fjl`).\r\n */\nconst \n/**\r\n * Returns whether constructor has derived object.\r\n * @function module:object.instanceOf\r\n * @param instanceConstructor {Function} - Constructor.\r\n * @param instance {*}\r\n * @instance {*}\r\n * @returns {Boolean}\r\n */\ninstanceOf = curry((instanceConstructor, instance) => instance instanceof instanceConstructor),\n\n/**\r\n * @function module:object.hasOwnProperty\r\n * @param propName {*}\r\n * @param typeInstance {*}\r\n * @returns {Boolean}\r\n * @deprecated - Use property directly instead.\r\n */\nhasOwnProperty = fPureTakesOne('hasOwnProperty'),\n\n/**\r\n * @function module:object.length\r\n * @param x {*}\r\n * @returns {Number}\r\n * @throws {Error} - Throws an error if value doesn't have a `length` property (\r\n *  `null`, `undefined`, {Boolean}, Symbol, et. al.).\r\n */\nlength = x => x.length,\n\n/**\r\n * Contains all the static functions from `Object` but curried and flipped;\r\n * @example\r\n * // E.g., `Object.defineProperties(obj, descriptor)` can now be used like\r\n * import {defineProperties} from 'fjl'\r\n * defineProperties(descriptor, someObj),\r\n * // Et. al.\r\n * @memberOf module:object\r\n * @type {{...Object}}\r\n */\nnative = Object.getOwnPropertyNames(Object).reduce((agg, key) => {\n  if (typeof Object[key] !== 'function') {\n    return agg;\n  }\n\n  const operation = Object[key];\n\n  switch (operation.length) {\n    case 2:\n      agg[key] = flip(operation);\n      break;\n\n    case 3:\n      agg[key] = flip3(operation);\n      break;\n\n    case 4:\n      agg[key] = flip4(operation);\n      break;\n\n    case 5:\n      agg[key] = flip5(operation);\n      break;\n\n    default:\n      agg[key] = Object[key];\n      break;\n  }\n\n  return agg;\n}, {}),\n\n/**\r\n * Gets passed in object's own enumerable keys (same as `Object.keys`).\r\n * @function module:object.keys\r\n * @param obj {*}\r\n * @returns {Array<String>}\r\n */\n{\n  keys\n} = native,\n\n/**\r\n * Defined as `Object.assign` else is the same thing but shimmed.\r\n * @function module:object.assign\r\n * @param obj0 {Object}\r\n * @param objs {...{Object}}\r\n * @returns {Object}\r\n */\nassign = (() => Object.assign ? (obj0, ...objs) => Object.assign(obj0, ...objs) : curry2((obj0, ...objs) => objs.reduce((topAgg, obj) => {\n  return Object.keys(obj).reduce((agg, key) => {\n    agg[key] = obj[key];\n    return agg;\n  }, topAgg);\n}, obj0)))();\n\n/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\nconst _Number = Number.name,\n      _NaN = 'NaN',\n      _Null = 'Null',\n      _Undefined = 'Undefined';\n/**\r\n * Returns the constructor/class/type name of a value.\r\n * @note Returns 'NaN' if value is of type `Number` and value is `isNaN`.\r\n * @note Returns 'Undefined' if value is `undefined`\r\n * @note Returns 'Null' if value is `null`\r\n * For values that have no concrete constructors and/or casters\r\n * (null, NaN, and undefined) we returned normalized names for them ('Null', 'NaN', 'Number')\r\n * @function module:object.typeOf\r\n * @param value {*}\r\n * @returns {string} - Constructor's name or derived name (in the case of `null`, `undefined`, or `NaN` (whose\r\n *  normalized names are 'Null', 'Undefined', 'NaN' respectively).\r\n */\n\nfunction typeOf(value) {\n  let retVal;\n\n  if (value === undefined) {\n    retVal = _Undefined;\n  } else if (value === null) {\n    retVal = _Null;\n  } else {\n    let constructorName = value.constructor.name;\n    retVal = constructorName === _Number && isNaN(value) ? _NaN : constructorName;\n  }\n\n  return retVal;\n}\n\n/**\r\n * Created by elyde on 12/18/2016.\r\n * @memberOf object\r\n */\nlet _String = String.name,\n    _Number$1 = Number.name,\n    _Object = Object.name,\n    _Boolean = Boolean.name,\n    _Symbol = 'Symbol',\n    _Map = 'Map',\n    _Set = 'Set',\n    _WeakMap = 'WeakMap',\n    _WeakSet = 'WeakSet',\n    _Null$1 = 'Null',\n    _Undefined$1 = 'Undefined';\nconst \n/**\r\n * Resolves/normalizes a type name from either a string or a constructor.\r\n * @function module:object.toTypeRef\r\n * @param type {Function|String} - String or function representing a type.\r\n * @returns {String}\r\n * @todo write tests for this function.\r\n */\ntoTypeRef = type => {\n  if (!type) {\n    return typeOf(type);\n  } else if (type.constructor === String || type instanceof Function) {\n    return type;\n  }\n\n  return typeOf(type);\n},\n\n/**\r\n * Returns an array of type refs from possible type refs (converts null, undefined, NaN, and other values into\r\n * type refs (either constructor name or constructor name based on whether value(s) is a string, a constructor, or not).\r\n * @function module:object.toTypeRefs\r\n * @param types {...(TypeRef|*)}\r\n * @returns {Array<TypeRef>}\r\n * @todo Ensure tests are written for this function.\r\n */\ntoTypeRefs = (...types) => types.map(toTypeRef),\n\n/**\r\n * Returns possible Type's TypeRef name.\r\n * @function module:object.toTypeRefName\r\n * @param Type {(TypeRef|*)}\r\n * @returns {String}\r\n * @todo Ensure tests are written for this function.\r\n */\ntoTypeRefName = Type => {\n  const ref = toTypeRef(Type);\n  return ref instanceof Function ? ref.name : ref;\n},\n\n/**\r\n * Returns possible Types' TypeRef names.\r\n * @function module:object.toTypeRefNames\r\n * @param types {...(TypeRef|*)}\r\n * @returns {String[]}\r\n * @todo Ensure tests are written for this function.\r\n */\ntoTypeRefNames = (...types) => types.map(toTypeRefName),\n\n/**\r\n * Returns whether a value is a function or not.\r\n * @function module:object.isFunction\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\nisFunction = instanceOf(Function),\n\n/**\r\n * Strict type checker.  Checks if given value is a direct instance of given type;  E.g.,\r\n * @example\r\n *   isType(String, 'abcdefg')  === true // true\r\n *   isType(String.name, 'abcdefg') === true\r\n *   isType(Number, NaN) === false\r\n *   isType(Number, 99) === true\r\n *   isType('Null', 99) === false // though, for `null` and `undefined` checks\r\n *                                // @see `isset`, in this module, instead\r\n *   isType('Undefined', undefined) === true // true\r\n *\r\n * @note Useful where absolute types, or some semblance thereof, are required.\r\n * @function module:object.isType\r\n * @param type {Function|ObjectConstructor|String} - Constructor or constructor name\r\n * @param obj {*}\r\n * @return {Boolean}\r\n */\nisType = curry((type, obj) => typeOf(obj) === toTypeRefName(type)),\n\n/**\r\n * Synonym for `isType` (or just a more accurate name for `isType`).\r\n * @function module:object.isStrictly\r\n * @param type {Function|ObjectConstructor|String} - Constructor or constructor name\r\n * @param obj {*}\r\n * @return {Boolean}\r\n */\nisStrictly = isType,\n\n/**\r\n * Loose type checker;  E.g., If `type` is not a constructor, but a constructor name, does a type check on\r\n * constructor names, else if first check fails and `type` is a constructor, performs an `instanceof` check\r\n * on value with constructor.\r\n * @note Use care when checking for `Array` since it is an `instanceof` Object.\r\n * @note For `null` and `undefined` their class cased names can be used for type checks\r\n * `isOfType('Null', null) === true (passes strict type check)` (or better yet @link `module:object.isset` can be used).\r\n * @throwsafe - Doesn't throw on `null` or `undefined` `obj` values.\r\n * @example\r\n * isOfType(Number, 99) === true        // true  (passes strict type check (numbers are not instances of `Number`\r\n *                                      //        constructor)\r\n * isOfType('Number', 99) === true      // true  (passes strict type check)\r\n * isOfType(Number, NaN) === true       // true. (passes instance of check)\r\n *                                      //        If you want \"true\" strict type checking use `isType`\r\n * isOfType(Object, []) === true        // true  (passes instance of check)\r\n * isOfType(Array, []) === true         // true  (passes instance of check)\r\n * isOfType(Object, {}) === true        // true  (passes instance of check)\r\n * isOfType(Object.name, {}) === true   // true  (Passes strict type check)\r\n * class Abc extends String {}\r\n * isOfType(String, new Abc('abcd')) // true (passes instanceof check)\r\n *\r\n * @function module:object.isOfType\r\n * @param type {Function|String} - Type reference (constructor or `constructor.name`).\r\n * @param x {*} - Value to check.\r\n * @returns {Boolean}\r\n */\nisOfType = curry((type, x) => isType(type, x) || instanceOf(type, x)),\n\n/**\r\n * Synonym for `isOfType` (or just a more accurate name).\r\n * @function module:object.isLoosely\r\n * @param type {Function|String} - Type reference (constructor or `constructor.name`).\r\n * @param x {*} - Value to check.\r\n * @returns {Boolean}\r\n */\nisLoosely = isOfType,\n\n/**\r\n * Checks if `value` is an es2015 `class`.\r\n * @function module:object.isClass\r\n * @param x {*}\r\n * @returns {boolean}\r\n */\nisClass = x => x && /^\\s{0,3}class\\s{1,3}/.test((x + '').substr(0, 10)),\n\n/**\r\n * Returns a boolean depicting whether a value is callable or not.\r\n * @function module:object.isCallable\r\n * @tentative\r\n * @param x {*}\r\n * @returns {Boolean}\r\n */\nisCallable = x => isFunction(x) && !isClass(x),\n\n/**\r\n * Checks if value is an array (same as `Array.isArray`).\r\n * @function module:object.isArray\r\n * @param value {*}\r\n * @returns {boolean}\r\n */\n{\n  isArray\n} = Array,\n\n/**\r\n * Checks whether value is an object or not.\r\n * @function module:object.isObject\r\n * @param value\r\n * @returns {Boolean}\r\n */\nisObject = isType(_Object),\n\n/**\r\n * Checks if value is a boolean.\r\n * @function module:object.isBoolean\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\nisBoolean = isType(_Boolean),\n\n/**\r\n * Checks if value is a valid number (also checks if isNaN so that you don't have to).\r\n * @function module:object.isNumber\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\nisNumber = isType(_Number$1),\n\n/**\r\n * Checks whether value is a string or not.\r\n * @function module:object.isString\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\nisString = isType(_String),\n\n/**\r\n * Checks whether value is of `Map` or not.\r\n * @function module:object.isMap\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\nisMap = isType(_Map),\n\n/**\r\n * Checks whether value is of `Set` or not.\r\n * @function module:object.isSet\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\nisSet = isType(_Set),\n\n/**\r\n * Checks whether value is of `WeakMap` or not.\r\n * @function module:object.isWeakMap\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\nisWeakMap = isType(_WeakMap),\n\n/**\r\n * Checks whether value is of `WeakSet` or not.\r\n * @function module:object.isWeakSet\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\nisWeakSet = isType(_WeakSet),\n\n/**\r\n * Checks if value is undefined.\r\n * @function module:object.isUndefined\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\nisUndefined = isType(_Undefined$1),\n\n/**\r\n * Checks if value is null.\r\n * @function module:object.isNull\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\nisNull = isType(_Null$1),\n\n/**\r\n * Checks if value is a `Symbol`.\r\n * @function module:object.isSymbol\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\nisSymbol = isType(_Symbol),\n\n/**\r\n * Checks if given `x` is set and of one of\r\n *  [String, Boolean, Number, Symbol] (null and undefined are immutable\r\n *  but are not \"usable\" (usually not what we want to operate on).\r\n * @function module:object.isUsableImmutablePrimitive\r\n * @param x {*}\r\n * @returns {Boolean}\r\n */\nisUsableImmutablePrimitive = x => {\n  const typeOfX = typeOf(x);\n  return isset(x) && [_String, _Number$1, _Boolean, _Symbol].some(Type => Type === typeOfX);\n},\n\n/**\r\n * Checks if !length.\r\n * @function module:object.isEmptyList\r\n * @param x {*}\r\n * @returns {Boolean}\r\n */\nisEmptyList = x => !length(x),\n\n/**\r\n * Checks if object has own properties/enumerable-props or not.\r\n * @function module:object.isEmptyObject\r\n * @param obj {*}\r\n * @returns {Boolean}\r\n */\nisEmptyObject = obj => isEmptyList(keys(obj)),\n\n/**\r\n * Checks if collection is empty or not (Map, WeakMap, WeakSet, Set etc.).\r\n * @function module:object.isEmptyCollection\r\n * @param x {*}\r\n * @returns {Boolean}\r\n */\nisEmptyCollection = x => x.size === 0,\n\n/**\r\n * Checks to see if passed in value is empty;  I.e.,\r\n *  check for one of '', 0, `null`, `undefined`, `NaN`, `false`, empty array, empty object, ~~empty function (zero arity)~~,\r\n *  or empty collection (es6 collection: Map, Set, WeakMap, or WeakSet etc.) (`!value.size`).\r\n * @function module:object.isEmpty\r\n * @param x {*} - Value to check.\r\n * @returns {Boolean}\r\n */\nisEmpty = x => {\n  if (!x) {\n    // if '', 0, `null`, `undefined`, `NaN`, or `false` then is empty\n    return true;\n  }\n\n  if (isNumber(x) || isFunction(x)) {\n    return false;\n  }\n\n  if (isArray(x)) {\n    // takes care of 'instances of Array'\n    return !x.length;\n  }\n\n  if (x.size !== undefined && !instanceOf(Function, x.size)) {\n    return !x.size;\n  }\n\n  if (isObject(x)) {\n    return !keys(x).length;\n  }\n\n  return false;\n},\n\n/**\r\n * Returns whether passed in values is defined and not null or not.\r\n * @function module:object.isset\r\n * @param x {*}\r\n * @returns {Boolean}\r\n */\nisset = x => x !== null && x !== undefined,\n\n/**\r\n * Checks to see if `x` is of one of the given type refs;  Strict type check (not-instanceof check).\r\n * @function object.isOneOf\r\n * @param x {*}\r\n * @param types {...(TypeRef|*)}\r\n * @returns {boolean}\r\n * @deprecated - Instead use @link module:isStrictlyOneOf\r\n * @todo write tests for this function.\r\n */\nisOneOf = (x, ...types) => {\n  const typeName = typeOf(x);\n  return toTypeRefNames(types).some(name => typeName === name);\n},\n\n/**\r\n * Checks if given value is strictly one of given types.\r\n * @function module:object.isStrictlyOneOf\r\n * @param x {*}\r\n * @param types {...TypeRef}\r\n * @returns {boolean}\r\n */\nisStrictlyOneOf = isOneOf,\n\n/**\r\n * Checks if given value is either strictly one of given types or is\r\n * an `instanceof` one of given types.\r\n * @function module:object.isLooselyOneOf\r\n * @param x {*}\r\n * @param types {...TypeRef}\r\n * @returns {boolean}\r\n */\nisLooselyOneOf = (x, ...types) => types.some(type => isType(type, x) || instanceOf(x, type)),\n\n/**\r\n * Checks if given value is instance of one of the types given.\r\n * @function module:object.instanceOfOne\r\n * @param x {*}\r\n * @param types {...TypeRef}\r\n * @returns {boolean}\r\n */\ninstanceOfOne = (x, ...types) => types.some(instanceOf(x)),\n\n/**\r\n * Checks if value qualifies (has `map` method) as a functor.\r\n * @function module:object.isFunctor\r\n * @param x {*}\r\n * @returns {bool}\r\n */\nisFunctor = x => x && x.map && instanceOf(Function, x.map);\n\n/**\r\n * @memberOf object\r\n */\n/**\r\n * Looks up property and returns it's value; Else `undefined`.\r\n * Method is null safe (will not throw on `null` or `undefined`).\r\n * @function module:object.lookup\r\n * @param key {String} - Key to search on `obj`\r\n * @param obj {Object} - Object to search `name` on.\r\n * @returns {*}\r\n */\n\nconst lookup = curry((key, obj) => isset(obj) ? obj[key] : undefined);\n\n/**\r\n * Creates a value `of` given type;  Checks for one of the following construction strategies (in order listed):\r\n * @example\r\n * // - If exists `(value).constructor.of` uses this.\r\n * // - If value is of one String, Boolean, Symbol, or Number types calls it's\r\n * //      constructor as a function (in cast form;  E.g., `constructor(...args)` )\r\n * // - Else if constructor is a function, thus far, then calls constructor using\r\n * //      the `new` keyword (with any passed in args).\r\n\r\n * @function module:object.of\r\n * @param x {*} - Value to derive returned value's type from.\r\n * @param [args] {...*} - Any args to pass in to matched construction strategy.\r\n * @returns {*|undefined} - New value of given value's type else `undefined`.\r\n */\n\nconst of = (x, ...args) => {\n  if (!isset(x)) {\n    return undefined;\n  }\n\n  const constructor = x.constructor;\n\n  if (constructor.hasOwnProperty('of')) {\n    return apply(constructor.of, args);\n  } else if (isUsableImmutablePrimitive(x)) {\n    return apply(constructor, args);\n  } else if (isFunction(constructor)) {\n    return new constructor(...args);\n  }\n\n  return undefined;\n};\n\nconst \n/**\r\n * Make a copy of a value or optionally copy incoming value onto an outgoing value (second parameter).\r\n * @note If incoming thing is an immmutable primitive (string, number, symbol, null, undefined, boolean)\r\n *  it is returned as is.\r\n * @function module:object.copy\r\n * @param x {*} - Thing to copy.\r\n * @param [out = undefined] {*} - Optional value to copy on to.  Not required.\r\n * @returns {*} - Copied thing or optionally outgoing value copied onto.\r\n */\ncopy = (x, out) => {\n  // if `null`, `undefined`, `''`, `0`, `false` return\n  if (!x) {\n    return x;\n  }\n\n  switch (typeOf(x)) {\n    case Array.name:\n      return !out ? x.slice(0) : Object.assign(out, x);\n    // If immutable primitive, return it\n\n    case Symbol.name:\n    case Boolean.name:\n    case String.name:\n    case Number.name:\n    case Promise.name:\n    case Function.name:\n    case 'NaN':\n    case 'Null':\n    case 'Undefined':\n      return x;\n\n    case 'Map':\n    case 'Set':\n    case 'WeakMap':\n    case 'WeakSet':\n      return new x.constructor(Array.from(x));\n    // Else make copy\n\n    default:\n      return Object.assign(!out ? of(x) : out, x);\n  }\n};\n\nconst \n/**\r\n * Gives you value at key/namespace-key within `obj`;  E.g.,\r\n * searchObj('all.your.base', {all: {your: {base: 99}}}) === 99 // `true`\r\n * @note If key is unreachable (undefined) returns `undefined`.\r\n *  Useful in cases where we do not want to check each key along the way before getting/checking value;  E.g.,\r\n * @example\r\n * ```\r\n * if (obj && obj.all && obj.all.your && obj.all.your.base) {\r\n *   // Thing we want to do\r\n * }\r\n *\r\n * // So with our function becomes\r\n * if (searchObj('all.your.base', obj)) {\r\n *   // Thing we want to do\r\n * }\r\n * ```\r\n * @function module:object.searchObj\r\n * @param nsString {String}\r\n * @param obj {*}\r\n * @returns {*}\r\n */\nsearchObj = curry((nsString, obj) => {\n  if (!obj) {\n    return obj;\n  }\n\n  if (nsString.indexOf('.') === -1) {\n    return obj[nsString];\n  }\n\n  const parts = nsString.split('.'),\n        limit = parts.length;\n  let ind = 0,\n      parent = obj;\n\n  for (; ind < limit; ind += 1) {\n    const node = parent[parts[ind]];\n\n    if (!isset(node)) {\n      return node;\n    }\n\n    parent = node;\n  }\n\n  return parent;\n});\n\n/**\r\n * @module errorThrowing\r\n * @description Contains error throwing facilities for when a value doesn't match a type.\r\n */\nconst \n/**\r\n * Pretty prints an array of types/type-strings for use by error messages;\r\n * Outputs \"`SomeTypeName`, ...\" from [SomeType, 'SomeTypeName', etc...]\r\n * @function module:errorThrowing.typeRefsToStringOrError\r\n * @param types {Array|TypesArray}\r\n * @return {String}\r\n * @private\r\n */\ntypeRefsToStringOrError = types => types.length ? types.map(type => `\\`${toTypeRefName(type)}\\``).join(', ') : '',\n\n/**\r\n * Prints a message from an object.  Object signature:\r\n * {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n * @function module:errorThrowing.defaultErrorMessageCall\r\n * @param tmplContext {Object|TemplateContext} - Object to use in error template.\r\n * @returns {string}\r\n * @private\r\n */\ndefaultErrorMessageCall = tmplContext => {\n  const {\n    contextName,\n    valueName,\n    value,\n    expectedTypeName,\n    foundTypeName,\n    messageSuffix\n  } = tmplContext,\n        isMultiTypeNames = isArray(expectedTypeName),\n        typesCopy = isMultiTypeNames ? 'of type' : 'of one of the types',\n        typesToMatchCopy = isMultiTypeNames ? typeRefsToStringOrError(expectedTypeName) : expectedTypeName;\n  return (contextName ? `\\`${contextName}.` : '`') + `${valueName}\\` is not ${typesCopy}: ${typesToMatchCopy}.  ` + `Type received: ${foundTypeName}.  Value: ${value};` + `${messageSuffix ? '  ' + messageSuffix + ';' : ''}`;\n},\n\n/**\r\n * Gets the error message thrower seeded with passed in errorMessage template call.\r\n * @function module:errorThrowing.getErrorIfNotTypeThrower$\r\n * @param errorMessageCall {Function|ErrorMessageCall}\r\n * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n * @returns {Function|ErrorIfNotType}\r\n * @private\r\n */\n_getErrorIfNotTypeThrower = (errorMessageCall, typeChecker = isOfType) => (ValueType, contextName, valueName, value, messageSuffix = null) => {\n  const expectedTypeName = toTypeRef(ValueType),\n        foundTypeName = typeOf(value);\n\n  if (typeChecker(ValueType, value)) {\n    return value;\n  } // Value matches type\n\n\n  throw new Error(errorMessageCall({\n    contextName,\n    valueName,\n    value,\n    expectedTypeName,\n    foundTypeName,\n    messageSuffix\n  }));\n},\n\n/**\r\n * Gets the error message thrower seeded with passed in errorMessage template call.\r\n * @function module:errorThrowing.getErrorIfNotTypesThrower$\r\n * @param errorMessageCall {Function|ErrorMessageCall}\r\n * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n * @returns {Function|ErrorIfNotTypes}\r\n * @private\r\n */\n_getErrorIfNotTypesThrower = (errorMessageCall, typeChecker = isOfType) => (valueTypes, contextName, valueName, value, messageSuffix = null) => {\n  const expectedTypeNames = valueTypes.map(toTypeRef),\n        matchFound = valueTypes.some(ValueType => typeChecker(ValueType, value)),\n        foundTypeName = typeOf(value);\n\n  if (matchFound) {\n    return value;\n  }\n\n  throw new Error(errorMessageCall({\n    contextName,\n    valueName,\n    value,\n    expectedTypeName: expectedTypeNames,\n    foundTypeName,\n    messageSuffix\n  }));\n},\n\n/**\r\n * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n * is not of given `type`.  This is the un-curried version.  For the curried version\r\n * see `module:errorThrowing.errorIfNotType`.\r\n * @function module:errorThrowing.errorIfNotType$\r\n * @param type {String|Function} - Type's name or type itself.\r\n * @param contextName {String} - Name of context to attribute errors if thrown.\r\n * @param valueName {String} - String rep of value.\r\n * @param value {*}\r\n * @param [messageSuffix=null] {String} - Optional.\r\n * @returns {*} - Given `value` if `value` matches passed in type.\r\n * @private\r\n */\n_errorIfNotType = _getErrorIfNotTypeThrower(defaultErrorMessageCall),\n\n/**\r\n * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n *  is not of one of the given `types`.  This is the un-curried version.  For the curried version\r\n * see `module:errorThrowing.errorIfNotTypes`.\r\n * @type {Function|module:errorThrowing.errorIfNotTypes}\r\n * @function module:errorThrowing.errorIfNotTypes$\r\n * @param types {Array} - Array of one or more types or type names themselves.\r\n * @param contextName {String} - Name of context to attribute errors if thrown.\r\n * @param valueName {String} - String rep of value.\r\n * @param value {*}\r\n * @returns {*} - Given `value` if `value` matches passed in type.\r\n * @private\r\n */\n_errorIfNotTypes = _getErrorIfNotTypesThrower(defaultErrorMessageCall),\n\n/**\r\n * Returns a function that can be used to ensure that values are of a given type.\r\n *   Also throws informative error messages containing the value types, names, expected type names,\r\n *   etc.\r\n * @function module:errorThrowing.getErrorIfNotTypeThrower\r\n * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n * @returns {Function|ErrorIfNotType} - Returns a function with the same signature as `errorIfNotType` though curried.\r\n */\ngetErrorIfNotTypeThrower = errorMessageCall => curry(_getErrorIfNotTypeThrower(errorMessageCall)),\n\n/**\r\n * Returns a function that can be used to ensure that a value is of one or more given types.\r\n *   The returned function is used in cases where informative error messages\r\n *   containing the value types, names, expected type names, are-required/should-be-used etc.\r\n * @function module:errorThrowing.getErrorIfNotTypesThrower\r\n * @param errorMessageCall {Function|ErrorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n * @returns {Function|ErrorIfNotTypes} - Returns a function with the same signature as `errorIfNotTypes` though curried.\r\n */\ngetErrorIfNotTypesThrower = errorMessageCall => curry(_getErrorIfNotTypesThrower(errorMessageCall)),\n\n/**\r\n * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n * is not of given `type`.  Curried.\r\n * @function module:errorThrowing.errorIfNotType\r\n * @param type {String|Function} - Type's name or type itself.\r\n * @param contextName {String} - Name of context to attribute errors if thrown.\r\n * @param valueName {String} - String rep of value.\r\n * @param value {*}\r\n * @param [messageSuffix=null] {String} - Optional.\r\n * @returns {*} - Given `value` if `value` matches passed in type.\r\n * @curried\r\n */\nerrorIfNotType = curry(_errorIfNotType),\n\n/**\r\n * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n *  is not of one of the given `types`.  Curried.\r\n * @function module:errorThrowing.errorIfNotTypes\r\n * @param types {Array} - Array of one or more types or type names themselves.\r\n * @param contextName {String} - Name of context to attribute errors if thrown.\r\n * @param valueName {String} - String rep of value.\r\n * @param value {*}\r\n * @returns {*} - Given `value` if `value` matches passed in type.\r\n * @curried\r\n */\nerrorIfNotTypes = curry(_errorIfNotTypes);\n/**\r\n * @typedef {*} Any - Synonym for 'any value'.\r\n */\n\n/**\r\n * @typedef {String|Function} TypeRef\r\n * @description Type reference.  Type itself or Type's name;  E.g., `Type.name`;\r\n */\n\n/**\r\n * @typedef {Object<value, valueName, expectedTypeName, foundTypeName, messageSuffix>} TemplateContext\r\n * @description Template context used for error message renderers (functions that take a context obj and return a string).\r\n * @property value {*}\r\n * @property valueName {String}\r\n * @property expectedTypeName {String} - Expected name of constructor of `value`;  E.g., usually `SomeConstructor.name`;\r\n * @property foundTypeName {String} - Found types name;  E.g., `FoundConstructor.name`;\r\n * @property [messageSuffix=null] {*} - Message suffix (sometimes an extra hint or instructions for\r\n *  directing user to fix where his/her error has occurred).  Optional.\r\n */\n\n/**\r\n * @typedef {Array<(String|Function)>} TypesArray\r\n */\n\n/**\r\n * @typedef {Function} TypeChecker\r\n * @description Checks whether a value is of given type.\r\n * @param Type {TypeRef} - a Type or it's name;  E.g., `Type.name`.\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\n\n/**\r\n * @typedef {Function} ErrorMessageCall\r\n * @description Error message template function.\r\n * @param tmplContext {TemplateContext}\r\n * @returns {String}\r\n */\n\n/**\r\n * @typedef {Function} ErrorIfNotType\r\n * @description Used to ensure value matches passed in type.\r\n * @param type {TypeRef} - Constructor name or constructor.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - What ever value is.\r\n */\n\n/**\r\n * @typedef {Function} ErrorIfNotTypes\r\n * @description Used to ensure a value matches one of one or more types passed in.\r\n * @param valueTypes {TypesArray} - Array of constructor names or constructors.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {*} - Whatever value is.\r\n */\n\n/**\r\n * @module object\r\n * @note Custom jsdoc type definitions defined toward end of file.\r\n */\n/**\r\n * Creates `defineProps` and `defineEnumProps` methods based on `{enumerable}` param.\r\n * @param {{enumerable: Boolean}}\r\n * @returns {function(*, *)|PropsDefinerCall}\r\n * @private\r\n */\n\nfunction createDefinePropsMethod({\n  enumerable\n}) {\n  const operation = enumerable ? defineEnumProp : defineProp;\n  return (argTuples, target) => {\n    argTuples.forEach(argTuple => {\n      const [TypeRef, propName, defaultValue] = argTuple;\n      apply(operation, [TypeRef, target, propName, defaultValue]);\n    });\n    return target;\n  };\n}\n\nconst \n/**\r\n * Creates a descriptor for a property which is settable but throws\r\n * errors when the `Type` is disobeyed.\r\n * @function module:object.createTypedDescriptor\r\n * @param Type {TypeRef} - {String|Function}\r\n * @param target {*}\r\n * @param propName {String}\r\n * @returns {Descriptor} - Property descriptor with just getter and setter.\r\n */\ncreateTypedDescriptor = (Type, target, propName) => {\n  let _value;\n\n  return {\n    get: function () {\n      return _value;\n    },\n    set: function (value) {\n      _value = errorIfNotType(Type, propName, target, value);\n    }\n  };\n},\n\n/**\r\n * Returns a target-descriptor tuple whose 'descriptor' will be set to\r\n *  enumerable (`enumerable: true`).\r\n * @function module:object.toEnumerableDescriptor\r\n * @param {TargetDescriptorTuple} - [target, descriptor] tuple.\r\n * @returns {TargetDescriptorTuple} - Array of target and descriptor.\r\n */\ntoEnumerableDescriptor = ([target, descriptor]) => {\n  descriptor.enumerable = true;\n  return [target, descriptor];\n},\n\n/**\r\n * Returns an target and descriptor tuple from given.\r\n * @function module:object.toTargetDescriptorTuple\r\n * @param targetOrTargetDescriptorTuple {(*|Array<*, *>)} - Target object or tuple of target and descriptor.\r\n * @returns {(Array<*>|Array<*,*>)}\r\n */\ntoTargetDescriptorTuple = targetOrTargetDescriptorTuple => isType('Array', targetOrTargetDescriptorTuple) ? // Strict type check for array\ntargetOrTargetDescriptorTuple : [targetOrTargetDescriptorTuple],\n\n/**\r\n * Allows you to define a \"typed\" property on given `target`.\r\n * @function module:object.defineProp\r\n * @param Type {TypeRef} - {String|Function}\r\n * @param target {TargetDescriptorTuple} - Target or array of target and descriptor ([target, descriptor]).\r\n * @param propName {String}\r\n * @param [defaultValue=undefined] {*}\r\n * @returns {TargetDescriptorTuple}\r\n */\ndefineProp = (Type, target, propName, defaultValue = undefined) => {\n  const [_target, _descriptor] = toTargetDescriptorTuple(target),\n        descriptor = _descriptor || createTypedDescriptor(Type, _target, propName);\n\n  Object.defineProperty(_target, propName, descriptor);\n\n  if (!isUndefined(defaultValue)) {\n    _target[propName] = defaultValue;\n  }\n\n  return [_target, descriptor];\n},\n\n/**\r\n * Allows you to define a \"typed\", enumerated property on `target`.\r\n * @function module:object.defineEnumProp\r\n * @param Type {TypeRef} - {String|Function}\r\n * @param target {TargetDescriptorTuple} - Target or array of target and descriptor ([target, descriptor]).\r\n * @param propName {String}\r\n * @param [defaultValue=undefined] {*}\r\n * @returns {TargetDescriptorTuple}\r\n */\ndefineEnumProp = (Type, target, propName, defaultValue = undefined) => {\n  const [_target, _descriptor] = toTargetDescriptorTuple(target),\n        descriptor = _descriptor || createTypedDescriptor(Type, _target, propName);\n\n  return defineProp(Type, toEnumerableDescriptor([_target, descriptor]), propName, defaultValue);\n},\n\n/**\r\n * Allows you to define multiple enum props at once on target.\r\n * @function module:object.defineEnumProps\r\n * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineEnumProp`.\r\n * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\r\n * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineEnumProp`.\r\n */\ndefineEnumProps = curry(createDefinePropsMethod({\n  enumerable: true\n})),\n\n/**\r\n * Allows you to define multiple props at once on target.\r\n * @function module:object.defineProps\r\n * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineProp`.\r\n * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\r\n * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineProp`.\r\n * @curried\r\n */\ndefineProps = curry(createDefinePropsMethod({\n  enumerable: false\n}));\n/** ============================================================= */\n\n/** Type definitions:                                             */\n\n/** ============================================================= */\n\n/**\r\n * @typedef {*} Target\r\n */\n\n/**\r\n * @typedef {Object} Descriptor\r\n */\n\n/**\r\n * @typedef {Array<Target, Descriptor>} TargetDescriptorTuple\r\n */\n\n/**\r\n * @typedef {Array.<TypeRef, TargetDescriptorTuple, String, *>}  DefinePropArgsTuple\r\n * @description Arguments list for `defineProp` and/or `defineEnumProp` (note: some\r\n *  parts of array/tuple are options (namely the last two args));  E.g.,\r\n *  ```\r\n *  [String, [someTarget], 'somePropName', 'someDefaultValue] // ...\r\n *  ```\r\n */\n\n/**\r\n * @typedef {Function} PropsDefinerCall\r\n * @description Same type as `defineProp` and `defineEnumProp`\r\n * @param argsTuple {DefinePropArgsTuple}\r\n * @param target {Target}\r\n * @returns {Array.<TargetDescriptorTuple>}\r\n */\n\nconst \n/**\r\n * Merges all objects down into one (takes two or more args).\r\n * @function module:object.assignDeep\r\n * @param obj0 {Object}\r\n * @param [objs] {...{Object}} - One or more objects to merge onto `obj0`.\r\n * @returns {Object}\r\n */\nassignDeep = curry2((obj0, ...objs) => !obj0 ? obj0 : objs.reduce((topAgg, obj) => !obj ? topAgg : keys(obj).reduce((agg, key) => {\n  let propDescription = Object.getOwnPropertyDescriptor(agg, key); // If property is not writable move to next item in collection\n\n  if (agg.hasOwnProperty(key) && propDescription && !(propDescription.get && propDescription.set) && !propDescription.writable) {\n    return agg;\n  }\n\n  if (isObject(agg[key]) && isObject(obj[key])) {\n    assignDeep(agg[key], obj[key]);\n  } else {\n    agg[key] = obj[key];\n  }\n\n  return agg;\n}, topAgg), obj0));\n\n/**\r\n *  List operations that overlap (apart from globally overlapping props and functions like `length`)\r\n *      on both strings and arrays.\r\n */\nconst \n/**\r\n * Concats/appends all functors onto the end of first functor.\r\n * Note:  functors passed in after the first one must be of the same type.\r\n * @function module:jsPlatform.concat\r\n * @param functor {Array|Object|*}\r\n * @param ...functor {Array|Object|*}\r\n * @return {*|Array|Object} - The type passed.\r\n * @throws {Error} - When passed in object doesn't have an `every` method.\r\n */\nconcat = fPureTakesOneOrMore('concat'),\n\n/**\r\n * Same as Array.prototype.slice\r\n * @function module:list.slice\r\n * @param separator {String|RegExp}\r\n * @param arr{Array}\r\n * @returns {Array}\r\n */\nslice = fPureTakes2('slice'),\n\n/**\r\n * `Array.prototype.includes` or shim.\r\n * @function module:list.includes\r\n * @param value {*}\r\n * @param xs {Array|String}\r\n * @returns {Boolean}\r\n */\nincludes = (() => 'includes' in Array.prototype ? fPureTakesOne('includes') : (value, xs) => xs.indexOf(value) > -1)(),\n\n/**\r\n * Searches list/list-like for given element `x`.\r\n * @function module:list.indexOf\r\n * @param x {*} - Element to search for.\r\n * @param xs {Array|String|*} - list or list like to look in.\r\n * @returns {Number} - `-1` if element not found else index at which it is found.\r\n */\nindexOf = fPureTakesOne('indexOf'),\n\n/**\r\n * Last index of (`Array.prototype.lastIndexOf`).\r\n * @function module:list.lastIndexOf\r\n * @param x {*} - Element to search for.\r\n * @param xs {Array|String|*} - list or list like to look in.\r\n * @returns {Number} - `-1` if element not found else index at which it is found.\r\n */\nlastIndexOf = fPureTakesOne('lastIndexOf');\n\n/**\r\n * @module boolean\r\n * @description Contains functional version of 'always-true', 'always-false', 'is-truthy', and 'is-falsy'.\r\n */\nconst \n/**\r\n * Returns whether `value` is 'truthy' or not\r\n * @function module:boolean.isTruthy\r\n * @param value\r\n * @returns {Boolean}\r\n */\nisTruthy = value => !!value,\n\n/**\r\n * Returns whether `value` is 'falsy' or not\r\n * @function module:boolean.isFalsy\r\n * @param value\r\n * @returns {Boolean}\r\n */\nisFalsy = value => !value,\n\n/**\r\n * Returns `true`.\r\n * @function module:boolean.alwaysTrue\r\n * @returns {Boolean}\r\n */\nalwaysTrue = () => true,\n\n/**\r\n * Returns `false`.\r\n * @function module:boolean.alwaysFalse\r\n * @returns {Boolean}\r\n */\nalwaysFalse = () => false,\n\n/**\r\n * Equality operator.\r\n * @function module:boolean.equal\r\n * @param a {*}\r\n * @param b {*}\r\n * @returns {boolean}\r\n */\nequal = curry((a, b) => a === b),\n\n/**\r\n * Equality operator for all.\r\n * @function module:boolean.equalAll\r\n * @param a {*} - Item `0`.\r\n * @param args {...*} - Others\r\n * @returns {boolean}\r\n */\nequalAll = curry2((a, ...args) => args.every(b => equal(a, b)));\n\n/**\r\n * Maps a function onto a List (string or array) or a functor (value containing a map method).\r\n * @function module:list.map\r\n * @param fn {Function} - Function to map on given value.\r\n * @param xs {Array|String|*}\r\n * @returns {Array|String|*}\r\n */\n\nconst map$1 = curry((fn, xs) => {\n  if (!isset(xs)) {\n    return xs;\n  }\n\n  let out = of(xs),\n      limit,\n      i = 0;\n\n  switch (typeOf(xs)) {\n    case 'Array':\n      limit = length(xs);\n\n      if (!limit) {\n        return out;\n      }\n\n      for (; i < limit; i += 1) {\n        out.push(fn(xs[i], i, xs));\n      }\n\n      return out;\n\n    case 'String':\n      limit = length(xs);\n\n      if (!xs) {\n        return out;\n      }\n\n      for (; i < limit; i += 1) {\n        out += fn(xs[i], i, xs);\n      }\n\n      return out;\n\n    default:\n      if (isFunctor(xs)) {\n        return xs.map(fn);\n      } // Other objects\n\n\n      return Object.keys(xs).reduce((agg, key) => {\n        out[key] = fn(xs[key], key, xs);\n        return out;\n      }, out);\n  }\n});\n\nconst \n/**\r\n * Pushes incoming `item` onto given array and returns said array.\r\n * @private\r\n * @param agg {Array}\r\n * @param item {*}\r\n * @returns {Array}\r\n */\naggregateArray = (agg, item) => {\n  agg.push(item);\n  return agg;\n};\n\n/**\r\n * List operator utils module.\r\n * @module listUtils\r\n */\nconst \n/**\r\n * Returns a slice of the given list from `startInd` to the end of the list.\r\n * @function module:listUtils.sliceFrom\r\n * @param startInd {Number}\r\n * @param xs {Array|String|*}\r\n * @returns {Array|String|*}\r\n */\nsliceFrom = curry((startInd, xs) => slice(startInd, undefined, xs)),\n\n/**\r\n * Slices from index `0` to given index.\r\n * @function module:listUtils.sliceTo\r\n * @param toInd {Number}\r\n * @param xs {Array|String|*}\r\n * @returns {Array|String|*}\r\n */\nsliceTo = curry((toInd, xs) => slice(0, toInd, xs)),\n\n/**\r\n * Slices a copy of list.\r\n * @function listUtils.sliceCopy\r\n * @param xs {Array|String|*}\r\n * @returns {Array|String|*}\r\n */\nsliceCopy = sliceFrom(0),\n\n/**\r\n * Generic 'ascending order' ordering function (use by the likes of `list.sort` etc.)\r\n * @function module:listUtils.genericAscOrdering\r\n * @param a {*}\r\n * @param b {*}\r\n * @returns {number}\r\n */\ngenericAscOrdering = curry((a, b) => {\n  if (a > b) {\n    return 1;\n  } else if (a < b) {\n    return -1;\n  }\n\n  return 0;\n}),\n\n/**\r\n * Returns length of all passed lists in list.\r\n * @function module:listUtils.lengths\r\n * @param lists ...{Array|String|*}\r\n * @returns {Array|String|*}\r\n */\nlengths = curry2((...lists) => map$1(length, lists)),\n\n/**\r\n * Returns a list of lists trimmed to the shortest length in given list of lists.   @background This method is used by the `zip*` functions to achieve their\r\n *  'slice to smallest' functionality.\r\n * @function module:listUtils.toShortest\r\n * @param lists {...(Array|String|*)}\r\n * @returns {Array|String|*}\r\n */\ntoShortest = curry2((...lists) => {\n  const listLengths = apply(lengths, lists),\n        smallLen = Math.min.apply(Math, listLengths);\n  return map$1((list, ind) => listLengths[ind] > smallLen ? sliceTo(smallLen, list) : sliceCopy(list), lists);\n}),\n\n/**\r\n * Reduces until predicate.\r\n * @function module:listUtils.reduceUntil\r\n * @param pred {Function} - `(item, index, list) => Boolean(...)`\r\n * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n * @param agg {*} - Zero value.\r\n * @param xs {Array|String|*} - List.\r\n * @returns {*}\r\n */\nreduceUntil = curry((pred, op, agg, xs) => {\n  const limit = length(xs);\n\n  if (!limit) {\n    return agg;\n  }\n\n  let ind = 0,\n      result = agg;\n\n  for (; ind < limit; ind++) {\n    if (pred(xs[ind], ind, xs)) {\n      break;\n    }\n\n    result = op(result, xs[ind], ind, xs);\n  }\n\n  return result;\n}),\n\n/**\r\n * Reduces until predicate (from right to left).\r\n * @function module:listUtils.reduceUntilRight\r\n * @param pred {Function} - `(item, index, list) => Boolean(...)`\r\n * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n * @param agg {*} - Zero value.\r\n * @param xs {Array|String|*} - List.\r\n * @returns {*}\r\n */\nreduceUntilRight = curry((pred, op, agg, arr) => {\n  const limit = length(arr);\n\n  if (!limit) {\n    return agg;\n  }\n\n  let ind = limit - 1,\n      result = agg;\n\n  for (; ind >= 0; ind--) {\n    if (pred(arr[ind], ind, arr)) {\n      break;\n    }\n\n    result = op(result, arr[ind], ind, arr);\n  }\n\n  return result;\n}),\n\n/**\r\n * Reduces a list with given operation (`op`) function.\r\n * @function module:listUtils.reduce\r\n * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n * @param agg {*} - Zero value.\r\n * @param xs {Array|String|*} - List.\r\n * @returns {*}\r\n */\nreduce$1 = reduceUntil(alwaysFalse),\n\n/**\r\n * Reduces a list with given operation (`op`) function (from right-to-left).\r\n * @function module:listUtils.reduceRight\r\n * @param op {Function} - Operation - `(agg, item, index, list) => agg`\r\n * @param agg {*} - Zero value.\r\n * @param xs {Array|String|*} - List.\r\n * @returns {*}\r\n */\nreduceRight$1 = reduceUntilRight(alwaysFalse),\n\n/**\r\n * Gets last index of a list/list-like (Array|String|Function etc.).\r\n * @function module:listUtils.lastIndex\r\n * @param x {Array|String|*} - list like or list.\r\n * @returns {Number} - `-1` if no element found.\r\n */\nlastIndex = x => {\n  const len = length(x);\n  return len ? len - 1 : 0;\n},\n\n/**\r\n * Finds index in string or list.\r\n * @function module:listUtils.findIndexWhere\r\n * @param pred {Function} - Predicate<element, index, arr>.\r\n * @param arr {Array|String}\r\n * @returns {Number} - `-1` if predicate not matched else `index` found\r\n */\nfindIndexWhere = curry((pred, arr) => {\n  let ind = 0;\n  const limit = length(arr);\n\n  for (; ind < limit; ind += 1) {\n    const predicateFulfilled = !!pred(arr[ind], ind, arr);\n\n    if (predicateFulfilled) {\n      return ind;\n    }\n  }\n\n  return -1;\n}),\n\n/**\r\n * Finds index in list from right to left.\r\n * @function module:listUtils.findIndexWhereRight\r\n * @param pred {Function} - Predicate<element, index, arr>.\r\n * @param arr {Array|String}\r\n * @returns {Number} - `-1` if predicate not matched else `index` found\r\n */\nfindIndexWhereRight = curry((pred, arr) => {\n  let ind = length(arr) - 1;\n\n  for (; ind >= 0; ind -= 1) {\n    const predicateFulfilled = !!pred(arr[ind], ind, arr);\n\n    if (predicateFulfilled) {\n      return ind;\n    }\n  }\n\n  return -1;\n}),\n\n/**\r\n * @function module:listUtils.findIndicesWhere\r\n * @param pred {Function}\r\n * @param xs {Array|String|*} - list or list like.\r\n * @returns {Array|undefined}\r\n */\nfindIndicesWhere = curry((pred, xs) => {\n  const limit = length(xs);\n  let ind = 0,\n      out = [];\n\n  for (; ind < limit; ind++) {\n    if (pred(xs[ind], ind, xs)) {\n      out.push(ind);\n    }\n  }\n\n  return out.length ? out : undefined;\n}),\n\n/**\r\n * @function module:listUtils.findWhere\r\n * @param pred {Function}\r\n * @param xs {Array|String|*} - list or list like.\r\n * @returns {*}\r\n */\nfindWhere = curry((pred, xs) => {\n  let ind = 0,\n      limit = length(xs);\n\n  if (!limit) {\n    return;\n  }\n\n  for (; ind < limit; ind++) {\n    let elm = xs[ind];\n\n    if (pred(elm, ind, xs)) {\n      return elm;\n    }\n  }\n\n  return undefined;\n});\n\nconst objUnion = curry((obj1, obj2) => assignDeep(obj1, obj2)),\n      objIntersect = curry((obj1, obj2) => reduce$1((agg, key) => {\n  if (obj2.hasOwnProperty(key)) {\n    agg[key] = obj2[key];\n  }\n\n  return agg;\n}, {}, keys(obj1))),\n      objDifference = curry((obj1, obj2) => reduce$1((agg, key) => {\n  if (!obj2.hasOwnProperty(key)) {\n    agg[key] = obj1[key];\n  }\n\n  return agg;\n}, {}, keys(obj1))),\n      objComplement = curry2((obj0, ...objs) => reduce$1((agg, obj) => assignDeep(agg, objDifference(obj, obj0)), {}, objs));\n\n/**\r\n * @module console\r\n * @description Console exports.\r\n */\nconst \n/**\r\n * `Console.log` method.\r\n * @function module:console.log\r\n * @params args {...*}\r\n * @returns {void}\r\n */\nlog = console.log.bind(console),\n\n/**\r\n * `Console.error` method.\r\n * @function module:console.error\r\n * @params args {...*}\r\n * @returns {void}\r\n */\nerror = console.error.bind(console),\n\n/**\r\n * Peeks (console.log) at incoming value(s) and returns the last value.\r\n * @function module:console.peek\r\n * @param args {...*}\r\n * @returns {*} Last given value (if one or more values) else first value.\r\n */\npeek = (...args) => (log(...args), args.pop()),\n\n/**\r\n * `Console.warn`.\r\n * @function module:console.warn\r\n * @param args {...*}\r\n * @returns {void}\r\n */\nwarn = console.warn.bind(console);\n\nconst \n/**\r\n * Clones and object or array using `JSON.parse(JSON.stringify(...))` pattern.\r\n * @function module:object.jsonClone\r\n * @param x {*}\r\n * @returns {*}\r\n */\njsonClone = x => JSON.parse(JSON.stringify(x));\n\nconst \n/**\r\n * Returns an associated list from given object.\r\n * @note Useful for working with plain javascript objects.\r\n * @function module:object.toAssocList\r\n * @param obj {(Object|Array|*)}\r\n * @returns {Array.<*, *>}\r\n */\ntoAssocList = obj => keys(obj).map(key => [key, obj[key]]),\n\n/**\r\n * Returns an associated list from given object (deeply (on incoming object's type)).\r\n * @note Does deep conversion on all values of passed in type's type.\r\n * @function module:object.toAssocListDeep\r\n * @param obj {*}\r\n * @param [TypeConstraint = Object] {(Constructor|Function)} - Type constraint to convert on.\r\n * @returns {*}\r\n */\ntoAssocListDeep = (obj, TypeConstraint = Object) => keys(obj).map(key => TypeConstraint && isType(TypeConstraint, obj[key]) ? [key, toAssocListDeep(obj[key], TypeConstraint)] : [key, obj[key]]),\n\n/**\r\n * From associated list to object.\r\n * @function module:object.fromAssocList\r\n * @param xs {Array.<Array>} - Associated list.\r\n * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n * @returns {*} - Default is `Object`\r\n */\nfromAssocList = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\n  agg[key] = value;\n  return agg;\n}, new OutType()),\n\n/**\r\n * From associated list to object (deep conversion on associative lists (array of 2 value arrays)).\r\n * @note Considers array of arrays associated lists.\r\n * @function module:object.fromAssocListDeep\r\n * @param xs {Array.<Array>} - Associated list.\r\n * @param [OutType = Object] {Constructor|Function} - Output type.  Default `Object`.\r\n * @returns {*} - Default is `Object`\r\n */\nfromAssocListDeep = (xs, OutType = Object) => xs.reduce((agg, [key, value]) => {\n  if (isArray(value) && isArray(value[0]) && value[0].length === 2) {\n    agg[key] = fromAssocListDeep(value, OutType);\n    return agg;\n  }\n\n  agg[key] = value;\n  return agg;\n}, new OutType());\n\nconst \n/**\r\n * Converts incoming value to an array.\r\n * @note For `WeakMap`, `WeakSet`, `Map` and `Set` result is the same as calling `Array.from` on such.\r\n * @note For `null`, `undefined`, `NaN`, `Number{}`, `Symbol{}`, `Boolean{}` returns an empty array.\r\n * @note Method does a shallow conversion;\r\n * @function module:object.toArray\r\n * @param x {*} - Thing to convert from.\r\n * @returns {Array}\r\n */\ntoArray = x => {\n  switch (typeOf(x)) {\n    case 'Null':\n    case 'Undefined':\n      return [];\n\n    case String.name:\n    case Array.name:\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Map':\n    case 'Set':\n      return Array.from(x);\n\n    case Object.name:\n    default:\n      return toAssocList(x);\n  }\n};\n\n/**\r\n * @module object\r\n * @description Object operations/combinators.\r\n */\n\n/**\r\n * Composes all functions passed in from right to left passing each functions return value to\r\n * the function on the left of itself.\r\n * @function module:function.compose\r\n * @type {Function}\r\n * @param args {...{Function}}\r\n * @returns {Function}\r\n */\n\nconst compose = (...args) => arg0 => reduceRight((value, fn) => fn(value), arg0, args);\n\n/**\r\n * @memberOf function\r\n */\n\n/**\r\n * Returns passed in parameter.\r\n * @haskellType `id :: a -> a`\r\n * @function module:function.id\r\n * @param x {*}\r\n * @returns {*}\r\n */\nconst id = x => x;\n\n/**\r\n * @memberOf function\r\n */\nconst \n/**\r\n * Negates a function that takes one/no argument.\r\n * @function module:function.negateF\r\n * @param fn {Function}\r\n * @returns {function(*=): boolean}\r\n */\nnegateF = fn => x => !fn(x),\n\n/**\r\n * Takes a function that takes two parameters and returns a negated version of given\r\n * function.\r\n * @function module:_negate.negateF2\r\n * @param fn {Function}\r\n * @returns {Function}\r\n */\nnegateF2 = fn => curry((a, b) => !fn(a, b)),\n\n/**\r\n * Takes a function that takes three parameters and returns a\r\n * negated version of given function.\r\n * @function module:_negate.negateF3\r\n * @param fn {Function}\r\n * @returns {Function}\r\n */\nnegateF3 = fn => curry((a, b, c) => !fn(a, b, c)),\n\n/**\r\n * Returns a negated version of given function.\r\n * Returned function is variadiac (takes one or more arguments).\r\n * @note function returned is uncurried.\r\n * @uncurried\r\n * @function module:function.negateFN\r\n * @param fn {Function}\r\n * @returns {Function}\r\n */\nnegateFN = fn => curry2((...args) => !apply(fn, args));\n\nconst \n/**\r\n * Run `operation` until predicate returns `true` (like a functional\r\n *  version of a while loop).\r\n * @function module:function.until\r\n * @param predicate {Function} :: a -> Boolean\r\n * @param operation {Function} :: a -> a\r\n * @param typeInstance {*} :: * - A monoidal zero or some starting point.\r\n * @returns {*} - What ever type `typeInstance` is\r\n */\nuntil = curry((predicate, operation, typeInstance) => {\n  let result = typeInstance;\n\n  while (!predicate(result)) {\n    result = operation(result);\n  }\n\n  return result;\n});\n\nconst \n/**\r\n * Returns a function or throws an error if given `f` is not a function.\r\n * @function module:function.fnOrError\r\n * @param symbolName {String} - Error message prefix.\r\n * @param f {Function|*} - Expected function.\r\n * @returns {Function}\r\n * @throws {Error} - Error if `f` is not of `function`\r\n */\nfnOrError = (symbolName, f) => {\n  if (!f || !(f instanceof Function)) {\n    throw new Error(`${symbolName} should be a function. ` + `Type received: ${typeOf(f)};  Value received: ${f}.`);\n  }\n\n  return f;\n};\n\n/**\r\n * No-op ('op' as in 'operation') - Performs no operation 'always' (good for places where\r\n * a value should always be a function etc.).\r\n * @function module:function.noop\r\n * @returns {undefined}\r\n */\nconst noop = () => undefined;\n\n/**\r\n * Trampolines function calls in order to avoid stack overflow errors\r\n * on recursive function calls; Tail recursion replacement.\r\n * @example\r\n * // Instead of ... (which is prone to stack-overflow in\r\n * //   non-tail-call optimized environments (es5-es3))\r\n * const factorial = n => n > 1 ? n * factorial(n - 1) : 1;\r\n *\r\n * // We do\r\n * const\r\n *\r\n *  factorialProcess = (n, agg = 1) => {\r\n *      n > 1 ? () => factorialProcess(n - 1, agg * n) : agg,\r\n *  },\r\n *\r\n *  factorial = trampoline(factorialProcess)\r\n *  // will not overflow as we are performing tail call elimination\r\n *  // by returning thunks from factorial process which run in `while` loop\r\n *  // within `trampoline`.\r\n *\r\n *  ;\r\n *\r\n * @note function returned by trampoline is not curried (for convenience)!\r\n * @function module:function.trampoline\r\n * @param fn {Function} - Function to trampoline.\r\n * @param [fnName=undefined] {String} - Optionally restrict trampolining only to function with specific name.\r\n * @returns {*} - Finally returned value.\r\n */\nconst trampoline = (fn, fnName) => {\n  return (...args) => {\n    let result = fn.apply(null, args);\n\n    while (typeof result === 'function' && (!fnName || result.name === fnName)) {\n      result = result();\n    }\n\n    return result;\n  };\n};\n\nconst \n/**\r\n * If given value is not a function, wraps it an 'identity' function (function that returns given value untouched) else returns given value. (useful in\r\n * functional composition).\r\n * @function module:function.toFunction\r\n * @param x {Function|any}\r\n * @returns {function(): any}\r\n */\ntoFunction = x => isFunction(x) ? x : () => x;\n\n/**\r\n * @module function\r\n */\n\n/**\r\n * @module object\r\n */\n/**\r\n * Normalizes step for `from` and `to` combination.\r\n * @function module:list.normalizeStep\r\n * @param from {Number}\r\n * @param to {Number}\r\n * @param [step = 1] {Number}\r\n * @returns {Number}\r\n * @private\r\n */\n\nconst normalizeStep = (from, to, step) => {\n  if (from > to) {\n    return step > 0 ? -step : step; // make step negative\n  }\n\n  return step < 0 ? -1 * step : step; // make step positive\n};\n\nconst \n/**\r\n * Range function - gives you an array contain numbers in given range.\r\n * @note normalizes `step` to be valid if range numbers given are invalid\r\n *  (forces `step` to be negative if range required is in the negative direction\r\n *  and forces `step` to be positive if range required is in the other direction).\r\n * @function module:list.range\r\n * @param from {Number}\r\n * @param to {Number}\r\n * @param [step = 1] {Number}\r\n * @returns {Array.<Number>}\r\n */\nrange = curry((from, to, step = 1) => {\n  let i = from;\n  const out = [];\n  step = normalizeStep(from, to, step);\n\n  if (step === 0 || from === to) {\n    return [from];\n  }\n\n  for (; (to - i) * step >= 0; i += step) {\n    out.push(i);\n  }\n\n  return out;\n});\n\n/**\r\n * Created by elydelacruz on 9/6/2017.\r\n */\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:jsPlatform.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\n\nconst split = fPureTakesOne('split');\n\n/**\r\n * @module jsPlatform\r\n */\n\nvar _jsPlatform = /*#__PURE__*/Object.freeze({\n    instanceOf: instanceOf,\n    hasOwnProperty: hasOwnProperty,\n    length: length,\n    native: native,\n    keys: keys,\n    assign: assign,\n    map: map,\n    filter: filter,\n    reduce: reduce,\n    reduceRight: reduceRight,\n    forEach: forEach,\n    some: some,\n    every: every,\n    join: join,\n    push: push,\n    reverse: reverse,\n    concat: concat,\n    slice: slice,\n    includes: includes,\n    indexOf: indexOf,\n    lastIndexOf: lastIndexOf,\n    split: split,\n    apply: apply,\n    call: call\n});\n\n/**\r\n * List operations module.\r\n * @module list\r\n */\nconst \n/**\r\n * Append two, or more, lists, i.e.,\r\n * @example\r\n * expectEqual(append(take(13, alphabetString), drop(13, alphabetString)), alphabetString); // true\r\n *\r\n * // Another example\r\n * const result = append(\r\n *   alphabetStr.split(''),\r\n *   alphabetStr.split('')\r\n * ),\r\n * expected = repeat(2, alphabetStr).split('');\r\n *\r\n * shallowEquals(result, expected) === true // `true`\r\n *\r\n * @function module:list.append\r\n * @param [args] {...(Array|String|*)} - One or more lists or list likes (strings etc.).\r\n * @returns {(Array|String|*)} - Same type as list like passed in.\r\n * @curried - Curried at upto 2 arguments.\r\n */\nappend = curry2((...args) => apply(concat, args)),\n\n/**\r\n * Returns head of list (first item of list).\r\n * @haskellType `head :: [a] -> a`\r\n * @function module:list.head\r\n * @param x {Array|String}\r\n * @returns {*} - First item from list\r\n */\nhead = x => x[0],\n\n/**\r\n * Returns last item of list.\r\n * @haskellType `last :: [a] -> a`\r\n * @function module:list.last\r\n * @param xs {Array|String}\r\n * @returns {*}\r\n */\nlast = xs => xs[lastIndex(xs)],\n\n/**\r\n * Returns tail part of list (everything after the first item as new list).\r\n * @haskelType `tail :: [a] -> [a]`\r\n * @function module:list.tail\r\n * @param xs {Array|String}\r\n * @returns {Array|String}\r\n */\ntail = xs => sliceFrom(1, xs),\n\n/**\r\n * Returns everything except last item of list as new list.\r\n * @haskellType `init :: [a] -> [a]`\r\n * @function module:list.init\r\n * @param xs {Array|String}\r\n * @returns {Array|String}\r\n */\ninit = xs => sliceTo(lastIndex(xs), xs),\n\n/**\r\n * Returns `head` and `tail` of passed in list/string in a tuple.\r\n * @haskellType `uncons :: [a] -> Maybe (a, [a])`\r\n * @function module:list.uncons\r\n * @param xs {Array|String}\r\n * @returns {Array|undefined}\r\n */\nuncons = xs => !xs || length(xs) === 0 ? undefined : [head(xs), tail(xs)],\n\n/**\r\n * Returns `tail` and `head` of passed in list/string in a tuple.\r\n * @haskellType `unconsr :: [a] -> Maybe ([a], a)`\r\n * @function module:list.unconsr\r\n * @param xs {Array|String}\r\n * @returns {Array|String|*|undefined}\r\n */\nunconsr = xs => !xs || length(xs) === 0 ? undefined : [init(xs), last(xs)],\n\n/**\r\n * Concatenates all the elements of a container of lists.\r\n * @haskellType `concat :: Foldable t => t [a] -> [a]`\r\n * @function module:list.concat\r\n * @param xs {Array}\r\n * @returns {Array}\r\n */\nconcat$1 = xs => {\n  switch (length(xs)) {\n    case undefined:\n    case 0:\n      return [];\n\n    case 1:\n      const item0 = xs[0];\n      return item0 && item0.slice ? sliceCopy(item0) : item0;\n\n    case 2:\n    default:\n      return apply(append, xs);\n  }\n},\n\n/**\r\n * Map a function over all the elements of a container and concatenate the resulting lists.\r\n * @haskellType `concatMap :: Foldable t => (a -> [b]) -> t a -> [b]`\r\n * @function module:list.concatMap\r\n * @param fn {Function}\r\n * @param foldableOfA {Array}\r\n * @returns {Array}\r\n */\nconcatMap = curry((fn, foldableOfA) => concat$1(map$1(fn, foldableOfA))),\n\n/**\r\n * Returns a copy of the passed in list reverses.\r\n * @haskellType `reverse :: [a] -> [a]`\r\n * @function module:list.reverse\r\n * @param xs {Array|String}\r\n * @returns {Array|String}\r\n */\nreverse$1 = xs => {\n  if (!isset(xs) || !xs.length) {\n    return xs;\n  }\n\n  let out = of(xs),\n      i = xs.length - 1;\n\n  switch (typeOf(xs)) {\n    case 'String':\n      for (; i >= 0; i -= 1) {\n        out += xs[i];\n      }\n\n      return out;\n\n    default:\n      for (; i >= 0; i -= 1) {\n        out.push(xs[i]);\n      }\n\n      return out;\n  }\n},\n\n/**\r\n * Takes an element and a list and `intersperses' that element between the\r\n *  elements of the list.\r\n * @function module:list.intersperse\r\n * @note In our version of the function javascript is loosely typed so,\r\n *  so is our function (to much overhead to make it typed) so `between` can be any value.\r\n * @param between {*} - Should be of the same type of elements contained in list.\r\n * @param arr {Array|String} - List.\r\n * @returns {Array|String}\r\n */\nintersperse = curry((between, xs) => {\n  if (!xs || !xs.length) {\n    return xs;\n  }\n\n  const limit = xs.length,\n        lastInd = limit - 1;\n  let out = of(xs),\n      i = 0;\n\n  if (isString(xs)) {\n    for (; i < limit; i += 1) {\n      out += i === lastInd ? xs[i] : xs[i] + between;\n    }\n\n    return out;\n  }\n\n  for (; i < limit; i += 1) {\n    if (i === lastInd) {\n      out.push(xs[i]);\n    } else {\n      out.push(xs[i], between);\n    }\n  }\n\n  return out;\n}),\n\n/**\r\n * `intercalate xs xss` is equivalent to (concat (intersperse xs xss)). It inserts the list xs in between the lists in xss and concatenates the result.\r\n * @haskellType `intercalate :: [a] -> [[a]] -> [a]`\r\n * @function module:list.intercalate\r\n * @param xs {Array|String}\r\n * @param xss {Array|String}\r\n * @returns {Array|String}\r\n */\nintercalate = curry((xs, xss) => {\n  if (isString(xss)) {\n    return intersperse(xs, xss);\n  }\n\n  return concat$1(intersperse(xs, xss));\n}),\n\n/**\r\n * Transposes rows and columns into lists by index;  E.g.,\r\n * Haskell example:\r\n * ```\r\n *  transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]\r\n *\r\n *  -- Notice the shorter arrays are ignored after their last index is copied over:\r\n *  transpose [[10,11],[20],[],[30,31,32]] == [[10,20,30],[11,31],[32]]\r\n * ```\r\n * @note from columns to rows.\r\n * @note Empty lists are ignored.\r\n * @haskellType `transpose :: [[a]] -> [[a]]`\r\n * @function module:list.transpose\r\n * @param xss {Array}\r\n * @returns {Array}\r\n */\ntranspose = xss => {\n  let numLists = length(xss),\n      ind = 0,\n      ind2;\n\n  if (!numLists) {\n    return [];\n  }\n\n  const listLengths = apply(lengths, xss),\n        longestListLen = maximum(listLengths),\n        outLists = [];\n\n  for (; ind < longestListLen; ind += 1) {\n    const outList = [];\n\n    for (ind2 = 0; ind2 < numLists; ind2 += 1) {\n      if (listLengths[ind2] < ind + 1) {\n        continue;\n      }\n\n      outList.push(xss[ind2][ind]);\n    }\n\n    outLists.push(outList);\n  }\n\n  return filter$1(x => length(x) > 0, outLists);\n},\n\n/**\r\n * Generates 2^n sub-sequences for passed in sequence (string/list) (`n` is\r\n * the length of the passed in sequence so: 2^length(xs)).\r\n * Note: The return value doubles per index/character passed in so use with caution!\r\n *  Also note that for 2^16 (or for a sequence of 16 characters) this algorithm\r\n *  will generate 65536 sub-sequences!  So caution should be taken to not\r\n *  use this with sequences above a certain length on certain platform (the browser thread in specific).\r\n * @function module:list.subsequences\r\n * @jsperftest https://jsperf.com/subsequences\r\n * @param xs {Array|String}\r\n * @returns {Array.<Array>}\r\n */\nsubsequences = xs => {\n  const listLen = length(xs),\n        len = Math.pow(2, listLen),\n        out = [];\n\n  for (let i = 0; i < len; i += 1) {\n    let entry = [];\n\n    for (let j = 0; j < listLen; j += 1) {\n      if (i & 1 << j) {\n        entry.push(xs[j]);\n      }\n    }\n\n    out.push(entry);\n  }\n\n  return out;\n},\n\n/**\r\n * Returns an array with the given indices swapped.\r\n * @function module:list.swapped\r\n * @param ind1 {Number}\r\n * @param ind2 {Number}\r\n * @param list {Array}\r\n * @returns {Array} - Copy of incoming with swapped values at indices.\r\n */\nswapped = curry((ind1, ind2, list) => {\n  const out = sliceCopy(list),\n        tmp = out[ind1];\n  out[ind1] = out[ind2];\n  out[ind2] = tmp;\n  return out;\n}),\n\n/**\r\n * Returns a list of permutations for passed in list.\r\n *  Use caution with lists above a length of 15 (will take long due to nature of\r\n *  algorithm).\r\n * @function module:list.permutations\r\n * @param xs {Array} - List.\r\n * @returns {Array<Array|String|*>} - Array of permutations.\r\n */\npermutations = xs => {\n  const limit = length(xs);\n\n  if (!limit || limit === 1) {\n    return [xs];\n  }\n\n  let list = sliceCopy(xs),\n      c = repeat(limit, 0),\n      i = 0;\n  const out = [list];\n\n  for (; i < limit; i++) {\n    if (c[i] < i) {\n      list = swapped(i % 2 === 0 ? 0 : c[i], i, list);\n      out.push(list);\n      c[i] += 1;\n      i = 0;\n      continue;\n    }\n\n    c[i] = 0;\n  }\n\n  return out;\n},\n\n/**\r\n * Left associative fold.  Reduces a container of elements down by the given operation (same as [].reduce).\r\n * @function module:list.foldl\r\n * @param fn {Function}\r\n * @param zero {*} - Aggregator.\r\n * @param functor {Array}\r\n * @returns {*} - Whatever type is lastly returned from `fn`.\r\n */\nfoldl = reduce$1,\n\n/**\r\n * Right associative fold.  Reduces a container of elements down by the given operation (same as [].reduceRight).\r\n * @function module:list.foldr\r\n * @param fn {Function}\r\n * @param zero {*} - Aggregator.\r\n * @param functor {Array}\r\n * @returns {*} - Whatever type is lastly returned from `fn`.\r\n */\nfoldr = reduceRight$1,\n\n/**\r\n * A variant of `foldl` except that this one doesn't require the starting point.  The starting point/value will be pulled\r\n * out from a copy of the container.\r\n * @function module:list.foldl1\r\n * @param op {Function}\r\n * @param xs {Array}\r\n * @returns {*} - Whatever type is lastly returned from `op`.\r\n */\nfoldl1 = curry((op, xs) => {\n  const parts = uncons(xs);\n  return !parts ? [] : reduce$1(op, parts[0], parts[1]);\n}),\n\n/**\r\n * A variant of `foldr` except that this one doesn't require the starting point/value.  The starting point/value will be pulled\r\n * out from a copy of the container.\r\n * @function module:list.foldr1\r\n * @param op {Function}\r\n * @param xs {Array}\r\n * @returns {*} - Whatever type is lastly returned from `op`.\r\n */\nfoldr1 = curry((op, xs) => {\n  const parts = unconsr(xs);\n  return !parts ? [] : reduceRight$1(op, parts[1], parts[0]);\n}),\n\n/**\r\n * Performs a map then a reduce all in one (from left-to-right). Returns a tuple\r\n * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n * @function module:list.mapAccumL\r\n * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n * @param zero {*} - An instance of the passed in list type used to aggregateArray on.\r\n * @param xs {Array} - list type.\r\n * @return {Array} - [aggregated, list]\r\n */\nmapAccumL = curry((op, zero, xs) => {\n  const list = sliceCopy(xs),\n        limit = length(xs);\n\n  if (!limit) {\n    return [zero, list];\n  }\n\n  let ind = 0,\n      agg = zero,\n      mapped = [],\n      tuple;\n\n  for (; ind < limit; ind++) {\n    tuple = op(agg, list[ind], ind);\n    agg = tuple[0];\n    mapped = tuple[1];\n  }\n\n  return [agg, mapped];\n}),\n\n/**\r\n * Performs a map and a reduce all in one (from right-to-left). Returns a tuple\r\n * containing the aggregated value and the result of mapping the passed in function on passed in list.\r\n * @function module:list.mapAccumR\r\n * @param op {Function} - Function<aggregator, item, index> : [aggregated, mapResult]\r\n * @param zero {*} - An instance of the passed in list type used to aggregateArray on.\r\n * @param xs {Array} - list type.\r\n * @return {Array} - [aggregated, list]\r\n */\nmapAccumR = curry((op, zero, xs) => {\n  const list = sliceCopy(xs),\n        limit = length(xs);\n\n  if (!limit) {\n    return [zero, list];\n  }\n\n  let ind = limit - 1,\n      agg = zero,\n      mapped = [],\n      tuple;\n\n  for (; ind >= 0; ind--) {\n    tuple = op(agg, list[ind], ind);\n    agg = tuple[0];\n    mapped = tuple[1];\n  }\n\n  return [agg, mapped];\n}),\n\n/**\r\n * iterate f x returns an infinite list of repeated applications of f to x.\r\n * @function module:list.iterate\r\n * @example `iterate(5, f, x) == [x, f(x), f(f(x)), ...]`\r\n * @param limit {Number}\r\n * @param op {Function} - Operation.\r\n * @param x {*} - Starting point.\r\n * @returns {*}\r\n */\niterate = curry((limit, op, x) => {\n  let ind = 0,\n      out = [],\n      lastX = x;\n\n  for (; ind < limit; ind += 1) {\n    out.push(lastX);\n    lastX = op(lastX, ind);\n  }\n\n  return out;\n}),\n\n/**\r\n * Repeats `x` `limit` number of times.\r\n * @function module:list.repeat\r\n * @param limit {Number}\r\n * @param x {*}\r\n * @return {Array}\r\n */\nrepeat = curry((limit, x) => iterate(limit, a => a, x)),\n\n/**\r\n * Same as `repeat` due to the nature of javascript (see haskell version for usage).\r\n * @function module:list.replicate\r\n * @param limit {Number}\r\n * @param x {*}\r\n * @return {Array}\r\n */\nreplicate = repeat,\n\n/**\r\n * Replicates a list `limit` number of times and appends the results (concat)\r\n * @function module:list.cycle\r\n * @param limit {Number}\r\n * @param xs {Array}\r\n * @returns {Array}\r\n */\ncycle = curry((limit, xs) => concat$1(replicate(limit, xs))),\n\n/**\r\n * Unfolds a value into a list of somethings.\r\n * @haskellType `unfoldr :: (b -> Maybe (a, b)) -> b -> [a]`\r\n * @function module:list.unfoldr\r\n * @param op {Function} - Operation to perform (should return a two component tuple (item to aggregateArray and item to unfold in next iteration).\r\n * @param x {*} - Starting parameter to unfold from.\r\n * @returns {Array} - An array of whatever you return from `op` yielded.\r\n */\nunfoldr = curry((op, x) => {\n  let ind = 0,\n      out = [],\n      resultTuple = op(x, ind, out);\n\n  while (resultTuple) {\n    out.push(resultTuple[0]);\n    resultTuple = op(resultTuple[1], ++ind, out);\n  }\n\n  return out;\n}),\n\n/**\r\n * Finds index in string or list (alias for `findIndex`).\r\n * @function module:list.findIndex\r\n * @param pred {Function} - Predicate<element, index, arr>.\r\n * @param arr {Array|String}\r\n * @returns {Number} - `-1` if predicate not matched else `index` found\r\n */\nfindIndex = findIndexWhere,\n\n/**\r\n * @function module:list.findIndices\r\n * @param pred {Function}\r\n * @param xs {Array} - list or list like.\r\n * @returns {Array|undefined}\r\n */\nfindIndices = findIndicesWhere,\n\n/**\r\n * @function module:list.elemIndex\r\n * @param x {*} - Element to search for.\r\n * @param xs {Array} - list or list like.\r\n * @returns {*}\r\n */\nelemIndex = curry((x, xs) => {\n  const foundInd = indexOf(x, xs);\n  return foundInd !== -1 ? foundInd : undefined;\n}),\n\n/**\r\n * @function module:list.elemIndices\r\n * @param value {*} - Element to search for.\r\n * @param xs {Array} - list or list like.\r\n * @returns {*}\r\n */\nelemIndices = curry((value, xs) => findIndices(x => x === value, xs)),\n\n/**\r\n * Takes `n` items from start of list to `limit` (exclusive).\r\n * @function module:list.take\r\n * @param list {Array|String}\r\n * @param limit {Number}\r\n * @returns {String|Array} - Passed in type's type\r\n */\ntake = sliceTo,\n\n/**\r\n * Drops `n` items from start of list to `count` (exclusive).\r\n * @function module:list.drop\r\n * @param list {Array|String}\r\n * @param count {Number}\r\n * @returns {String|Array} - Passed in type's type\r\n */\ndrop = sliceFrom,\n\n/**\r\n * Splits `x` in two at given `index` (exclusive (includes element/character at\r\n * given index in second part of returned list)).\r\n * @function module:list.splitAt\r\n * @param ind {Number} - Index to split at.\r\n * @param list {Array|String} - functor (list or string) to split.\r\n * @returns {Array|String} - List like type passed\r\n */\nsplitAt = (ind, list) => [sliceTo(ind, list), sliceFrom(ind, list)],\n\n/**\r\n * Gives an list with passed elements while predicate was true.\r\n * @function module:list.takeWhile\r\n * @param pred {Function} - Predicate<*, index, list|string>\r\n * @param list {Array|String}\r\n * @returns {Array}\r\n */\ntakeWhile = curry((pred, list) => reduceUntil(negateF3(pred), // predicate\nisString(list) ? (agg, x) => agg + x : aggregateArray, // operation\nof(list), // aggregate\nlist)),\n\n/**\r\n * Returns an list without elements that match predicate.\r\n * @function module:list.dropWhile\r\n * @param pred {Function} - Predicate<*, index, list|string>\r\n * @param list {Array|String}\r\n * @refactor\r\n * @returns {Array|String}\r\n */\ndropWhile = curry((pred, list) => {\n  const limit = length(list),\n        splitPoint = findIndexWhere((x, i, xs) => !pred(x, i, xs), list);\n  return splitPoint === -1 ? sliceFrom(limit, list) : slice(splitPoint, limit, list);\n}),\n\n/**\r\n * @function module:list.dropWhileEnd\r\n * @param pred {Function} - Predicate<*, index, list|string>\r\n * @param list {Array|String}\r\n * @refactor\r\n * @returns {Array|String}\r\n */\ndropWhileEnd = curry((pred, list) => {\n  const splitPoint = findIndexWhereRight((x, i, xs) => !pred(x, i, xs), list);\n\n  if (splitPoint === -1) {\n    return of(list);\n  }\n\n  return sliceTo(splitPoint + 1, list);\n}),\n\n/**\r\n * Gives you the `span` of items matching predicate\r\n * and items not matching predicate;  E.g., Gives an\r\n * array of arrays;  E.g., [[matching-items], [non-matching-items]]\r\n * @function list.span\r\n * @param pred {Function} - List predicate (`(x, i, list) => bool`)\r\n * @param list {Array|String}\r\n * @returns {(Array<Array<*>>|Array<String>)}\r\n * @type {Function}\r\n */\nspan = curry((pred, list) => {\n  const splitPoint = findIndexWhere(negateF3(pred), list);\n  return splitPoint === -1 ? [sliceFrom(0, list), of(list)] : splitAt(splitPoint, list);\n}),\n\n/**\r\n * breakOnList, applied to a predicate p and a list xs, returns a tuple\r\n * where first element is longest prefix (possibly empty) of xs of elements\r\n * that do not satisfy p and second element is the remainder of the list:\r\n * @haskellExample\r\n * Replace `break` with `breakOnList` for our version.\r\n * ```\r\n * breakOnList (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])\r\n * breakOnList (< 9) [1,2,3] == ([],[1,2,3])\r\n * breakOnList (> 9) [1,2,3] == ([1,2,3],[])\r\n * ```\r\n * @function module:list.breakOnList\r\n * @param pred {Function}\r\n * @param list {Array|String|*}\r\n * @returns {Array}\r\n */\nbreakOnList = curry((pred, list) => {\n  const splitPoint = findIndexWhere(negateF3(pred), list);\n  return splitPoint === -1 ? [of(list), sliceFrom(0, list)] : reverse$1(splitAt(splitPoint, list));\n}),\n\n/**\r\n * Gets item at index.\r\n * @function module:list.at\r\n * @param ind {Number} - Index.\r\n * @param xs {Array} - list or list like.\r\n * @returns {*|undefined} - Item or `undefined`.\r\n */\nat = lookup,\n\n/**\r\n * Find an item in structure of elements based on given predicate (`pred`).\r\n * @function module:list.find\r\n * @param pred {Function}\r\n * @param xs {Array} - list or list like.\r\n * @returns {*} - Found item.\r\n */\nfind = findWhere,\n\n/**\r\n * For each function (same as `[].forEach` except in functional format).\r\n * @function module:list.forEach\r\n * @param fn {Function} - Operation (`(element, index, list) => {...}`, etc.)\r\n * @param xs {(Array|String)}\r\n * @returns {void}\r\n */\nforEach$1 = curry((fn, list) => {\n  const limit = length(list);\n\n  if (!limit) {\n    return;\n  }\n\n  let ind = 0;\n\n  for (; ind < limit; ind += 1) {\n    fn(list[ind], ind, list);\n  }\n}),\n\n/**\r\n * Filters a structure of elements using given predicate (`pred`) (same as `[].filter`).\r\n * @function module:list.filter\r\n * @param pred {Function}\r\n * @param xs {Array} - list or list like.\r\n * @returns {Array} - Structure of filtered elements.\r\n */\nfilter$1 = curry((pred, xs) => {\n  let ind = 0,\n      limit = length(xs),\n      out = [];\n\n  if (!limit) {\n    return out;\n  }\n\n  for (; ind < limit; ind++) {\n    if (pred(xs[ind], ind, xs)) {\n      out.push(xs[ind]);\n    }\n  }\n\n  return out;\n}),\n\n/**\r\n * Partitions a list on a predicate;  Items that match predicate are in first list in tuple;  Items that\r\n * do not match the tuple are in second list in the returned tuple.\r\n *  Essentially `[filter(p, xs), filter(negateF3(p), xs)]`.\r\n * @function module:list.partition\r\n * @param pred {Function} - Predicate<item, index, originalArrayOrString>\r\n * @param list {Array}\r\n * @returns {Array|String} - Tuple of arrays or strings (depends on incoming list (of type list or string)).\r\n */\npartition = curry((pred, list) => !length(list) ? [[], []] : [filter$1(pred, list), filter$1(negateF3(pred), list)]),\n\n/**\r\n * Returns a boolean indicating whether an element exists in given structure of elements.\r\n * @function module:list.elem\r\n * @param element {*}\r\n * @param xs {Array}\r\n * @returns {Boolean}\r\n */\nelem = includes,\n\n/**\r\n * The opposite of `elem` - Returns a boolean indicating whether an element exists in given list.\r\n * @function module:list.notElem\r\n * @param element {*}\r\n * @param xs {Array}\r\n * @returns {Boolean}\r\n */\nnotElem = negateF2(includes),\n\n/**\r\n * Checks if list `xs1` is a prefix of list `xs2`\r\n * @function module:list.isPrefixOf\r\n * @param xs1 {Array|String|*}\r\n * @param xs2 {Array|String|*}\r\n * @returns {boolean}\r\n */\nisPrefixOf = curry((xs1, xs2) => {\n  const limit1 = length(xs1),\n        limit2 = length(xs2);\n\n  if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\n    return false;\n  }\n\n  let ind = 0;\n\n  for (; ind < limit1; ind++) {\n    if (xs1[ind] !== xs2[ind]) {\n      return false;\n    }\n  }\n\n  return true;\n}),\n\n/**\r\n * Checks if list `xs1` is a suffix of list `xs2`\r\n * @function module:list.isSuffixOf\r\n * @param xs1 {Array|String|*}\r\n * @param xs2 {Array|String|*}\r\n * @returns {boolean}\r\n */\nisSuffixOf = curry((xs1, xs2) => {\n  const limit1 = length(xs1),\n        limit2 = length(xs2);\n\n  if (limit2 < limit1 || !limit1 || !limit2 || indexOf(xs1[0], xs2) === -1) {\n    return false;\n  }\n\n  let ind1 = limit1 - 1,\n      ind2 = limit2 - 1;\n\n  for (; ind1 >= 0; ind1--) {\n    if (xs1[ind1] !== xs2[ind2]) {\n      return false;\n    }\n\n    ind2 -= 1;\n  }\n\n  return true;\n}),\n\n/**\r\n * Checks if list `xs1` is an infix of list `xs2`\r\n * @function module:list.isInfixOf\r\n * @param xs1 {Array|String|*}\r\n * @param xs2 {Array|String|*}\r\n * @returns {boolean}\r\n */\nisInfixOf = curry((xs1, xs2) => {\n  const limit1 = length(xs1),\n        limit2 = length(xs2);\n\n  if (limit2 < limit1 || !limit1 || !limit2) {\n    return false;\n  }\n\n  let ind1,\n      foundLen,\n      ind = 0;\n\n  for (; ind < limit2; ind += 1) {\n    foundLen = 0;\n\n    for (ind1 = 0; ind1 < limit1; ind1 += 1) {\n      if (xs2[ind1 + ind] === xs1[ind1]) {\n        foundLen += 1;\n      }\n\n      if (foundLen === limit1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}),\n\n/**\r\n * Checks if list `xs1` is a sub-sequence of list `xs2`\r\n * @function module:list.isSubsequenceOf\r\n * @param xs1 {Array|String|*}\r\n * @param xs2 {Array|String|*}\r\n * @returns {boolean}\r\n */\nisSubsequenceOf = curry((xs1, xs2) => {\n  const len = Math.pow(2, length(xs2)),\n        lenXs1 = length(xs1);\n  let foundLen, i;\n\n  for (i = 0; i < len; i += 1) {\n    foundLen = 0;\n\n    for (let j = 0; j < len; j += 1) {\n      if (i & 1 << j && indexOf(xs2[j], xs1) > -1) {\n        foundLen += 1;\n      }\n\n      if (foundLen === lenXs1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}),\n\n/**\r\n * The group function takes a list and returns a list of lists such that\r\n *  the concatenation of the result is equal to the argument. Moreover, each\r\n *  sublist in the result contains only equal elements. For example,\r\n * `group \"Mississippi\" = [\"M\",\"i\",\"ss\",\"i\",\"ss\",\"i\",\"pp\",\"i\"]`\r\n * It is a special case of groupBy, which allows the programmer to supply\r\n *  their own equality test.\r\n * @haskellType `group :: Eq a => [a] -> [[a]]`\r\n * @function module:list.group\r\n * @param xs {Array|String}\r\n * @returns {Array<Array|String|*>|*}\r\n */\ngroup = xs => groupBy((a, b) => a === b, xs),\n\n/**\r\n * Allows you to group items in a list based on your supplied equality check.\r\n * @note Sames `group` but allows you to specify equality operation.\r\n * @haskellType `groupBy :: (a -> a -> Bool) -> [a] -> [[a]]`\r\n * @function module:list.groupBy\r\n * @param equalityOp {Function}\r\n * @param xs {Array}\r\n * @returns {*}\r\n */\ngroupBy = curry((equalityOp, xs) => {\n  const limit = length(xs);\n\n  if (!limit) {\n    return sliceCopy(xs);\n  }\n\n  let ind = 0,\n      prevItem,\n      item,\n      predOp = x => {\n    if (equalityOp(x, prevItem)) {\n      ind++;\n    }\n\n    if (equalityOp(x, item)) {\n      prevItem = x;\n      return true;\n    }\n\n    return false;\n  },\n      agg = [];\n\n  for (; ind < limit; ind += 1) {\n    item = xs[ind];\n    agg.push(takeWhile(predOp, slice(ind, limit, xs)));\n  }\n\n  return agg;\n}),\n\n/**\r\n * The inits function returns all initial segments of the argument, shortest first. For example,\r\n * ```\r\n * shallowEquals(inits('abc'), ['','a','ab','abc'])\r\n * ```\r\n * @function module:list.inits\r\n * @haskellType `inits :: [a] -> [[a]]`\r\n * @param xs {Array}\r\n * @returns {Array}\r\n */\ninits = xs => {\n  let limit = length(xs),\n      ind = 0,\n      agg = [];\n\n  if (!limit) {\n    return [];\n  }\n\n  for (; ind <= limit; ind += 1) {\n    agg.push(sliceTo(ind, xs));\n  }\n\n  return agg;\n},\n      //map(list => init(list), xs),\n\n/**\r\n * The inits function returns all initial segments of the argument, shortest first. For example,\r\n * ```\r\n * shallowEquals(tails('abc'), ['abc', 'bc', 'c',''])\r\n * ```\r\n * @function module:list.tails\r\n * @haskellType `tails :: [a] -> [[a]]`\r\n * @param xs {Array}\r\n * @returns {Array}\r\n */\ntails = xs => {\n  let limit = length(xs),\n      ind = 0,\n      agg = [];\n\n  if (!limit) {\n    return [];\n  }\n\n  for (; ind <= limit; ind += 1) {\n    agg.push(slice(ind, limit, xs));\n  }\n\n  return agg;\n},\n      //map(list => tail(list), xs),\n\n/**\r\n * Strips prefix list from given list\r\n * @function module:list.stripPrefix\r\n * @param prefix {Array|String|*}\r\n * @param list {Array|string|*}\r\n * @returns {Array|*}\r\n */\nstripPrefix = curry((prefix, list) => isPrefixOf(prefix, list) ? splitAt(length(prefix), list)[1] : sliceCopy(list)),\n\n/**\r\n * zip takes two lists and returns a list of corresponding pairs.\r\n * If one input list is short, excess elements of the longer list are discarded.\r\n * @haskellType `zip :: [a] -> [b] -> [(a, b)]`\r\n * @function module:list.zip\r\n * @param arr1 {Array}\r\n * @param arr2 {Array}\r\n * @returns {Array<Array<*,*>>}\r\n */\nzip = curry((arr1, arr2) => {\n  if (!length(arr1) || !length(arr2)) {\n    return [];\n  }\n\n  const [a1, a2] = toShortest(arr1, arr2);\n  return reduce$1((agg, item, ind) => aggregateArray(agg, [item, a2[ind]]), [], a1);\n}),\n\n/**\r\n * zipN takes one or more lists and returns a list containing lists of all indices\r\n * at a given index, index by index.\r\n * If one input list is short, excess elements of the longer list are discarded.\r\n * @function module:list.zipN\r\n * @param lists {Array|String} - One ore more lists of the same type.\r\n * @returns {Array}\r\n */\nzipN = curry2((...lists) => {\n  const trimmedLists = apply(toShortest, lists);\n  return reduce$1((agg, item, ind) => aggregateArray(agg, map$1(xs => xs[ind], trimmedLists)), [], trimmedLists[0]);\n}),\n\n/**\r\n * @haskellType `zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]`\r\n * @function module:list.zip3\r\n * @param arr1 {Array}\r\n * @param arr2 {Array}\r\n * @param arr3 {Array}\r\n * @returns {Array<Array<*,*>>}\r\n */\nzip3 = curry((arr1, arr2, arr3) => zipN(arr1, arr2, arr3)),\n\n/**\r\n * @haskellType `zip4 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]`\r\n * @function module:list.zip4\r\n * @param arr1 {Array}\r\n * @param arr2 {Array}\r\n * @param arr3 {Array}\r\n * @param arr4 {Array}\r\n * @returns {Array<Array<*,*>>}\r\n */\nzip4 = curry((arr1, arr2, arr3, arr4) => zipN(arr1, arr2, arr3, arr4)),\n\n/**\r\n * @haskellType `zip5 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]`\r\n * @function module:list.zip5\r\n * @param arr1 {Array}\r\n * @param arr2 {Array}\r\n * @param arr3 {Array}\r\n * @param arr4 {Array}\r\n * @param arr5 {Array}\r\n * @returns {Array<Array<*,*>>}\r\n */\nzip5 = curry((arr1, arr2, arr3, arr4, arr5) => zipN(arr1, arr2, arr3, arr4, arr5)),\n\n/**\r\n * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]\r\n * zipWith generalises zip by zipping with the function given as the\r\n * first argument, instead of a function tupling function (function that returns a tuple). For example,\r\n * zipWith (+) is applied to two lists to produce the list of corresponding sums.\r\n * @note `_|_` means bottom or perpetual (@see\r\n *  - https://wiki.haskell.org/Bottom\r\n *  - https://stackoverflow.com/questions/19794681/what-does-this-syntax-mean-in-haskell-or\r\n *  )\r\n * @example\r\n * ```\r\n * zipWith f [] _|_ = []\r\n * ```\r\n * @haskellType `zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]`\r\n * @function module:list.zipWith\r\n * @param op {Function} - Takes two parts of a tuple and returns a tuple.\r\n *  E.g., ` op :: a -> b -> (a, b)`\r\n * @param xs1 {Array}\r\n * @param xs2 {Array}\r\n * @returns {Array<Array<*,*>>}\r\n */\nzipWith = curry((op, xs1, xs2) => {\n  if (!length(xs1) || !length(xs2)) {\n    return [];\n  }\n\n  const [a1, a2] = toShortest(xs1, xs2);\n  return reduce$1((agg, item, ind) => aggregateArray(agg, op(item, a2[ind])), [], a1);\n}),\n\n/**\r\n * Zips all given lists with tupling function. Note: Haskell types do not have\r\n *  a way (that I know of) to show one or more for params in a function so `@haskellType` below\r\n *  is left there for general purpose not for exactness as is told by aforementioned.\r\n * @haskellType `zipWithN :: (a -> b -> c) -> [a] -> [b] -> [c]` - Where `N` is the number\r\n *  of lists to zip.\r\n * @function module:list.zipWithN\r\n * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n *  of said parts:\r\n *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n * @param lists ...{Array}\r\n * @returns {Array<Array<*,*>>}\r\n */\nzipWithN = curry3((op, ...lists) => {\n  const trimmedLists = apply(toShortest, lists),\n        lenOfTrimmed = length(trimmedLists);\n\n  if (!lenOfTrimmed) {\n    return [];\n  } else if (lenOfTrimmed === 1) {\n    return sliceTo(length(trimmedLists[0]), trimmedLists[0]);\n  }\n\n  return reduce$1((agg, item, ind) => aggregateArray(agg, apply(op, map$1(xs => xs[ind], trimmedLists))), [], trimmedLists[0]);\n}),\n\n/**\r\n * Zips 3 lists with tupling function.\r\n * @haskellType `zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]`\r\n * @function module:list.zipWith3\r\n * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n *  of said parts:\r\n *  E.g., ` op :: a -> b -> c -> (a, b, c)`\r\n * @param xs1 {Array}\r\n * @param xs2 {Array}\r\n * @param xs3 {Array}\r\n * @returns {Array<Array<*,*>>}\r\n */\nzipWith3 = curry((op, xs1, xs2, xs3) => zipWithN(op, xs1, xs2, xs3)),\n\n/**\r\n * Zips 4 lists with tupling function.\r\n * @haskellType `zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c]  -> [d] -> [e]`\r\n * @function module:list.zipWith4\r\n * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n *  of said parts:\r\n *  E.g., ` op :: a -> b -> c -> d -> (a, b, c, d)`\r\n * @param xs1 {Array}\r\n * @param xs2 {Array}\r\n * @param xs3 {Array}\r\n * @param xs4 {Array}\r\n * @returns {Array<Array<*,*>>}\r\n */\nzipWith4 = curry((op, xs1, xs2, xs3, xs4) => zipWithN(op, xs1, xs2, xs3, xs4)),\n\n/**\r\n * Zips 5 lists.\r\n * @haskellType `zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c]  -> [d] -> [e] -> [f]`\r\n * @function module:list.zipWith5\r\n * @param op {Function} - Takes expected number of parts for tuple and returns a tuple\r\n *  of said parts:\r\n *  E.g., ` op :: a -> b -> c -> d -> e -> (a, b, c, d, e)`\r\n * @param xs1 {Array}\r\n * @param xs2 {Array}\r\n * @param xs3 {Array}\r\n * @param xs4 {Array}\r\n * @param xs5 {Array}\r\n * @returns {Array<Array<*,*>>}\r\n */\nzipWith5 = curry((op, xs1, xs2, xs3, xs4, xs5) => zipWithN(op, xs1, xs2, xs3, xs4, xs5)),\n\n/**\r\n * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n * @haskellType `unzip :: [(a, b)] -> ([a], [b])`\r\n * @function module:list.unzip\r\n * @param arr {Array|*}\r\n * @returns {Array|*}\r\n */\nunzip = foldl((agg, item) => {\n  agg[0].push(item[0]);\n  agg[1].push(item[1]);\n  return agg;\n}, [[], []]),\n\n/**\r\n * unzip transforms a list of pairs into a list of first components and a list of second components.\r\n * @sudoHaskellType `unzipN :: [(a, b, ...x)] -> ([a], [b], ...[x])`\r\n * @function module:list.unzipN\r\n * @param list {Array|*} - List of tuples (lists).\r\n * @returns {Array|*}\r\n */\nunzipN = list => {\n  if (!length(list)) {\n    return [];\n  }\n\n  const lenItem0 = length(list[0]);\n  let zero = lenItem0 ? unfoldr(numLists => numLists-- ? [[], numLists] : undefined, lenItem0) : [];\n  return foldl((agg, item) => {\n    agg.forEach((outList, ind) => outList.push(item[ind]));\n    return agg;\n  }, zero, list);\n},\n\n/**\r\n * Returns true if any item in container passes predicate `p`.\r\n * @function module:list.any\r\n * @param p {Function} - Predicate.\r\n * @param xs {Array|String}\r\n * @returns {Boolean}\r\n */\nany = curry((p, xs) => {\n  let ind = 0,\n      limit = length(xs);\n\n  if (!limit) {\n    return false;\n  }\n\n  for (; ind < limit; ind += 1) {\n    if (p(xs[ind])) {\n      return true;\n    }\n  }\n\n  return false;\n}),\n\n/**\r\n * Returns true if all items in container pass predicate `p`.\r\n * @function module:list.all\r\n * @param p {Function} - Predicate.\r\n * @param xs {Array|String}\r\n * @returns {Boolean}\r\n */\nall = curry((p, xs) => {\n  const limit = length(xs);\n  let ind = 0;\n\n  if (!limit) {\n    return false;\n  }\n\n  for (; ind < limit; ind++) {\n    if (!p(xs[ind], ind, xs)) {\n      return false;\n    }\n  }\n\n  return true;\n}),\n\n/**\r\n * Conjuction of container of bools (or truthy and/or falsy values);  Returns\r\n * `true` if all in container are 'truthy' else returns `false`\r\n * @function module:list.and\r\n * @param xs {Array|String}\r\n * @returns {Boolean}\r\n */\nand = xs => all(isTruthy, xs),\n\n/**\r\n * Returns a boolean indicating whether any item in container is 'truthy' or not.\r\n * **Note** The haskell type for this function only takes two items, but here\r\n * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n * @function module:list.or\r\n * @haskellType `or :: Bool -> Bool -> Bool`\r\n * @param xs {Array|String}\r\n * @returns {Boolean}\r\n */\nor = xs => any(isTruthy, xs),\n\n/**\r\n * Returns a boolean indicating whether all items in container are 'falsy' or not.\r\n * **Note** The haskell type for this function only takes two items, but here\r\n * we allow the passing of more than one item (may change later to adhere to the haskell type).\r\n * @function module:list.not\r\n * @haskellType `not :: Bool -> Bool`\r\n * @param xs {Array|String}\r\n * @returns {Boolean}\r\n */\nnot = xs => all(isFalsy, xs),\n\n/**\r\n * Computes the sum of the numbers of a structure.\r\n * @function module:list.sum\r\n * @haskellType `sum :: (List t, Num a) => t a -> a`\r\n * @param list {Array|String}\r\n * @returns {Number}\r\n */\nsum = list => foldl((agg, x) => agg + x, 0, list),\n\n/**\r\n * Computes the product of the numbers of a structure.\r\n * @function module:list.product\r\n * @haskellType `product :: (List t, Num a) => t a -> a`\r\n * @param list {Array|String}\r\n * @returns {Number}\r\n */\nproduct = list => foldl((agg, x) => agg * x, 1, list),\n\n/**\r\n * Returns the largest element in a non-empty structure of elements.\r\n * @function module:list.maximum\r\n * @haskellType `maximum :: forall a . Ord a => t a -> a`\r\n * @param list {Array|String}\r\n * @returns {*} - Whatever type the array is made of (if any).\r\n */\nmaximum = list => last(sortBy(genericAscOrdering, list)),\n\n/**\r\n * Returns the smallest element in a non-empty structure of elements.\r\n * @function module:list.minimum\r\n * @haskellType `minimum :: forall a . Ord a => t a -> a`\r\n * @param list {Array|String}\r\n * @returns {*} - Whatever type the array is made of (if any).\r\n */\nminimum = list => head(sortBy(genericAscOrdering, list)),\n\n/**\r\n * scanl is similar to foldl, but returns a list of successive reduced values from the left:\r\n * ```\r\n * scanl f z [x1, x2, ...] == [z, z `f` x1, (z `f` x1) `f` x2, ...]\r\n * ```\r\n * Also note that:\r\n * ```\r\n * last (scanl f z xs) == foldl f z xs.\r\n * ```\r\n * @function module:list.scanl\r\n * @param fn {Function}\r\n * @param zero {*}\r\n * @param xs {Array}\r\n * @returns {Array|*}\r\n */\nscanl = curry((fn, zero, xs) => {\n  if (!xs || !length(xs)) {\n    return [];\n  }\n\n  const limit = length(xs);\n  let ind = 0,\n      result = zero,\n      out = [];\n\n  while (ind < limit) {\n    result = fn(result, xs[ind], ind, xs);\n    out.push(result);\n    ind++;\n  }\n\n  return out;\n}),\n\n/**\r\n * `scanl1` is a variant of `scanl` that has no starting value argument:\r\n * `shallowCompare(scanl1(fn, [x1, x2, ...]), [x1, fn(x1, x2), ...]) // true`\r\n * @function module:list.scanl1\r\n * @param fn {Function}\r\n * @param xs {Array}\r\n * @returns {Array|*}\r\n */\nscanl1 = curry((fn, xs) => {\n  if (!xs || !xs.length) {\n    return [];\n  }\n\n  return scanl(fn, head(xs), tail(xs));\n}),\n\n/**\r\n * Same as `scanl` but from the right (similiar to `foldr`'s relationship to 'foldl').\r\n * Note also `scanr`'s relationship ot `foldr`:\r\n * `head (scanr(fn, z, xs)) === foldr(fn, z, xs).\r\n * @function module:list.scanr\r\n * @param fn {Function}\r\n * @param zero {*}\r\n * @param xs {Array}\r\n * @returns {Array|*}\r\n */\nscanr = curry((fn, zero, xs) => {\n  if (!xs || !length(xs)) {\n    return [];\n  }\n\n  const limit = length(xs);\n  let ind = limit - 1,\n      result = xs[0],\n      out = [];\n\n  while (ind > -1) {\n    result = fn(result, xs[ind], ind, xs);\n    out.push(result);\n    ind--;\n  }\n\n  return out;\n}),\n\n/**\r\n * Same as `scanr` but takes no zero/accumulator value.\r\n * @function module:list.scanr1\r\n * @param fn {Function}\r\n * @param xs {Array}\r\n * @returns {Array|*}\r\n */\nscanr1 = curry((fn, xs) => {\n  if (!xs || !xs.length) {\n    return [];\n  }\n\n  return scanr(fn, last(xs), init(xs));\n}),\n\n/**\r\n * The nub function removes duplicate elements from a list.\r\n * In particular, it keeps only the first occurrence of each element.\r\n * (The name nub means `essence'.) It is a special case of nubBy, which\r\n * allows the programmer to supply their own equality test.\r\n * ```shallowCompare( nub ([1,2,3,4,3,2,1,2,4,3,5]), [1,2,3,4,5] )```\r\n * @function module:list.nub\r\n * @param list {Array|String|*}\r\n * @returns {Array}\r\n */\nnub = list => nubBy((a, b) => a === b, list),\n\n/**\r\n * `remove(x, xs)` removes the first occurrence of `x` from `xs`.\r\n * For example, `remove('a', 'banana') === 'bnana';`\r\n * @function module:list.remove\r\n * @param x {*}\r\n * @param list {Array|String|*}\r\n * @returns {Array}\r\n */\nremove = curry((x, list) => removeBy((a, b) => a === b, x, list)),\n\n/**\r\n * The sort function implements a stable sorting algorithm.\r\n * It is a special case of sortBy, which allows the programmer\r\n * to supply their own comparison function.\r\n * ```shallowCompare(sort ([1,6,4,3,2,5]), [1,2,3,4,5,6]) // true```\r\n * @function module:list.sort\r\n * @param xs {Array|String|*}\r\n * @returns {Array}\r\n */\nsort = xs => sortBy(genericAscOrdering, xs),\n\n/**\r\n * Sort a list by comparing the results of a key function applied to each\r\n * element. sortOn f is equivalent to sortBy (comparing f), but has the\r\n * performance advantage of only evaluating f once for each element in the\r\n * input list. This is called the decorate-sort-undecorate paradigm, or\r\n * Schwartzian transform.\r\n *\r\n * Elements are arranged from from lowest to highest, keeping duplicates\r\n * in the order they appeared in the input.\r\n *\r\n * Ex:\r\n * ```\r\n * shallowEquals(\r\n *  sortOn (head, [[2, \"world\"], [4, \"!\"], [1, \"Hello\"]]),\r\n *  [[1,\"Hello\"],[2,\"world\"],[4,\"!\"]]\r\n * ) // true\r\n * ```\r\n * @function module:list.sortOn\r\n * @param valueFn {Function}\r\n * @param xs {Array|String|*}\r\n * @returns {Array}\r\n */\nsortOn = curry((valueFn, xs) => // Un-decorate\nmap$1(decorated => decorated[1], // Decorate and sort\nsortBy( // Ordering\n([a0], [b0]) => genericAscOrdering(a0, b0), // Decorate\nmap$1(item => [valueFn(item), item], xs)))),\n\n/**\r\n * The sortBy function is the non-overloaded (in haskell terms) version of sort.\r\n * @haskellExample ```\r\n *  >>> sortBy (\\(a,_) (b,_) -> compare a b) [(2, \"world\"), (4, \"!\"), (1, \"Hello\")]\r\n *  [(1,\"Hello\"),(2,\"world\"),(4,\"!\")]\r\n * ```\r\n * @function module:list.sortBy\r\n * @param orderingFn {Function}\r\n * @param xs {Array|String|*}\r\n * @returns {Array|String|*}\r\n */\nsortBy = curry((orderingFn, xs) => sliceCopy(xs).sort(orderingFn || genericAscOrdering)),\n\n/**\r\n * The insert function takes an element and a list and inserts the element\r\n * into the list at the first position where it is less than or equal to the\r\n * next element. In particular, if the list is sorted before the call, the\r\n * result will also be sorted. It is a special case of insertBy, which allows\r\n * the programmer to supply their own comparison function.\r\n * @function module:list.insert\r\n * @param x {*}\r\n * @param xs {Array|*}\r\n * @returns {Array}\r\n */\ninsert = curry((x, xs) => {\n  if (!xs.length) {\n    return of(xs, x);\n  }\n\n  const foundIndex = findIndex(item => x <= item, xs);\n  return foundIndex === -1 ? concat$1([xs, of(xs, x)]) : concat$1(intersperse(of(xs, x), splitAt(foundIndex, xs)));\n}),\n\n/**\r\n * A version of `insert` that allows you to specify the ordering of the inserted\r\n * item;  Before/at, or after\r\n * @function module:list.insertBy\r\n * @haskellType `insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]`\r\n * @note `Ordering` means 'something that is order-able'\r\n *  operated on by this functions logic.\r\n * @param orderingFn {Function} - A function that returns `-1`, `0`, or 1`.\r\n * @param x {*} - Value to insert.\r\n * @param xs {Array} - List to insert into (note new list is returned)\r\n * @returns {Array} - New list.\r\n */\ninsertBy = curry((orderingFn, x, xs) => {\n  const limit = length(xs);\n\n  if (!limit) {\n    return [x];\n  }\n\n  let ind = 0;\n\n  for (; ind < limit; ind += 1) {\n    if (orderingFn(x, xs[ind]) <= 0) {\n      const parts = splitAt(ind, xs);\n      return concat$1([parts[0], [x], parts[1]]);\n    }\n  }\n\n  return aggregateArray(sliceCopy(xs), x);\n}),\n\n/**\r\n * The nubBy function behaves just like nub, except it uses a user-supplied equality predicate.\r\n * @function module:list.nubBy\r\n * @param pred {Function}\r\n * @param list {Array|String|*}\r\n * @returns {Array}\r\n */\nnubBy = curry((pred, list) => {\n  if (!length(list)) {\n    return [];\n  }\n\n  const limit = length(list);\n\n  let ind = 0,\n      currItem,\n      out = [],\n      anyOp = storedItem => pred(currItem, storedItem);\n\n  for (; ind < limit; ind += 1) {\n    currItem = list[ind];\n\n    if (any(anyOp, out)) {\n      continue;\n    }\n\n    out.push(currItem);\n  }\n\n  return out;\n}),\n\n/**\r\n * Behaves the same as `remove`, but takes a user-supplied equality predicate.\r\n * @function module:list.removeBy\r\n * @param pred {Function} - Equality predicate `(a, b) => bool`\r\n * @param x {*}\r\n * @param list {Array|String|*}\r\n * @returns {Array}\r\n */\nremoveBy = curry((pred, x, list) => {\n  const foundIndex = findIndex(item => pred(x, item), list);\n\n  if (foundIndex > -1) {\n    const parts = splitAt(foundIndex, list);\n    return append(parts[0], tail(parts[1]));\n  }\n\n  return sliceCopy(list);\n}),\n\n/**\r\n * The `removeFirstsBy` function takes a predicate and two lists and returns the first list with the first\r\n * occurrence of each element of the second list removed.\r\n * @function module:list.removeFirstBy\r\n * @param pred {Function}\r\n * @param xs1 {Array|String|*}\r\n * @param xs2 {Array|String|*}\r\n * @returns {Array}\r\n */\nremoveFirstsBy = curry((pred, xs1, xs2) => foldl((agg, x) => removeBy(pred, x, agg), xs1, xs2)),\n\n/**\r\n * Returns the union on elements matching boolean check passed in.\r\n * @function module:list.unionBy\r\n * @param pred {Function} - `pred :: a -> a -> Bool`\r\n * @param arr1 {Array}\r\n * @param arr2 {Array}\r\n * @returns {Array}\r\n */\nunionBy = curry((pred, arr1, arr2) => foldl((agg, b) => {\n  const alreadyAdded = any(a => pred(a, b), agg);\n  return !alreadyAdded ? (agg.push(b), agg) : agg;\n}, sliceCopy(arr1), arr2)),\n\n/**\r\n * Creates a union on matching elements from array1.\r\n * @function module:list.union\r\n * @param arr1 {Array}\r\n * @param arr2 {Array}\r\n * @returns {Array}\r\n */\nunion = curry((arr1, arr2) => append(arr1, filter$1(elm => !includes(elm, arr1), arr2))),\n\n/**\r\n * Performs an intersection on list 1 with  elements from list 2.\r\n * @function module:list.intersect\r\n * @param arr1 {Array}\r\n * @param arr2 {Array}\r\n * @returns {Array}\r\n */\nintersect = curry((arr1, arr2) => !arr1 || !arr2 || !arr1 && !arr2 ? [] : filter$1(elm => includes(elm, arr2), arr1)),\n\n/**\r\n * Returns an intersection by predicate.\r\n * @function module:list.intersectBy\r\n * @param pred {Function} - `pred :: a -> b -> Bool`\r\n * @param list1 {Array}\r\n * @param list2 {Array}\r\n * @return {Array}\r\n */\nintersectBy = curry((pred, list1, list2) => foldl((agg, a) => any(b => pred(a, b), list2) ? (agg.push(a), agg) : agg, [], list1)),\n\n/**\r\n * Returns the difference of list 1 from list 2.\r\n * @note The `difference` operation here is non-associative;  E.g., `a - b` is not equal to `b - a`;\r\n * @function module:list.difference\r\n * @param array1 {Array}\r\n * @param array2 {Array}\r\n * @returns {Array}\r\n */\ndifference = curry((array1, array2) => {\n  // augment this with max length and min length ordering on op\n  if (array1 && !array2) {\n    return sliceCopy(array1);\n  } else if (!array1 && array2 || !array1 && !array2) {\n    return [];\n  }\n\n  return reduce$1((agg, elm) => !includes(elm, array2) ? (agg.push(elm), agg) : agg, [], array1);\n}),\n\n/**\r\n * Returns the complement of list 0 and the reset of the passed in arrays.\r\n * @function module:list.complement\r\n * @param arr0 {Array}\r\n * @param arrays {...Array}\r\n * @returns {Array}\r\n */\ncomplement = curry2((arr0, ...arrays) => reduce$1((agg, arr) => append(agg, difference(arr, arr0)), [], arrays));\n\n/**\r\n * @module string\r\n * @description Contains functions for strings.\r\n */\nconst \n/**\r\n * Splits a string on all '\\n', '\\r', '\\n\\r', or '\\r\\n' characters.\r\n * @function module:string.lines\r\n * @param str {String}\r\n * @returns {Array}\r\n */\nlines = split(/[\\n\\r]/gm),\n\n/**\r\n * Splits a string on all '\\s' and/or all '\\t' characters.\r\n * @function module:string.words\r\n * @param str{String}\r\n * @returns {Array}\r\n */\nwords = split(/[\\s\\t]/gm),\n\n/**\r\n * Intersperse an array of strings with '\\s' and then concats them.\r\n * @function module:string.unwords\r\n * @param arr {String}\r\n * @returns {Array}\r\n */\nunwords = intercalate(' '),\n\n/**\r\n * Intersperses a '\\n' character into a list of strings and then concats it.\r\n * @function module:string.unlines\r\n * @param list {Array|String|*}\r\n * @returns {Array}\r\n */\nunlines = intercalate('\\n'),\n\n/**\r\n * Lower cases first character of a non-empty string.\r\n * @function module:string.lcaseFirst\r\n * @param xs {String}\r\n * @returns {string}\r\n * @throws {Error} - Throws error if receiving anything that is not a string.\r\n */\nlcaseFirst = xs => {\n  _errorIfNotType(String, 'lcaseFirst', 'xs', xs);\n\n  return xs[0].toLowerCase() + xs.substring(1);\n},\n\n/**\r\n * Upper cases first character of a non-empty string.\r\n * @function module:string.ucaseFirst\r\n * @param xs {String}\r\n * @returns {string}\r\n * @throws {Error} - Throws error if receiving anything that is not a string.\r\n */\nucaseFirst = xs => {\n  _errorIfNotType(String, 'ucaseFirst', 'xs', xs);\n\n  return xs[0].toUpperCase() + xs.substring(1);\n},\n\n/**\r\n * Camel cases (class case) a string.\r\n * @function module:string.camelCase\r\n * @param xs {String}\r\n * @param [pattern=/[^a-z\\d/i]/] {RegExp} - Pattern to split on.  Optional.\r\n * @throws {Error} - Throws error if param `xs` is not a string.\r\n * @returns {string}\r\n * @curried\r\n */\ncamelCase = (xs, pattern = /[^a-z\\d]/i) => compose(join(''), map$1(str => ucaseFirst(str.toLowerCase())), filter$1(x => !!x), split(pattern))(_errorIfNotType(String, 'camelCase', 'xs', xs)),\n\n/**\r\n * Class cases a string.  Uses pattern /[^a-z\\d/i]/ to split on.\r\n * If you require a different pattern use `string.camelCase(str, pattern)`\r\n * and then upper case first character (`ucaseFirst`).\r\n * @function module:string.classCase\r\n * @param xs {String}\r\n * @returns {string}\r\n * @throws {Error} - Throws error if `xs` is not a string (via `camelCase` call).\r\n */\nclassCase = compose(ucaseFirst, camelCase);\n/**\r\n * Functional version of `String.prototype.split`.\r\n * @function module:string.split\r\n * @param separator {String|RegExp}\r\n * @param str {String}\r\n * @returns {Array}\r\n */\n\n/**\r\n * @module fjl\r\n * @description Exports all module methods (object, list, string modules etc.).\r\n * @goal to include everything from haskell's Prelude where it makes sense in order to create\r\n *  a subset of functions which can make the javascript developer more efficient and make his/her\r\n *  code more concise (and functional).\r\n * @motivation preludejs, lodash/fp, RamdaJs, Haskell.\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html\r\n * @see http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html\r\n */\nconst jsPlatform = _jsPlatform;\n/**\r\n * @typedef {String|Function|ArrayBufferConstructor|ArrayConstructor|BooleanConstructor|MapConstructor|NumberConstructor|SetConstructor|WeakMapConstructor|WeakSetConstructor} TypeRef\r\n * @description Type reference.  Either actual type or type's name;  E.g., `Type.name`\r\n * Also note: Class cased names are use for values that do not have `name` properties;  Namely: 'Null', 'NaN' and 'Undefined' (for their respective values respectively).\r\n */\n\nexport { _errorIfNotType, _errorIfNotTypes, _getErrorIfNotTypeThrower, _getErrorIfNotTypesThrower, aggregateArray, all, alwaysFalse, alwaysTrue, and, any, append, apply, assign, assignDeep, at, breakOnList, call, camelCase, classCase, complement, compose, concat$1 as concat, concatMap, copy, createTypedDescriptor, curry, curry2, curry3, curry4, curry5, curryN, cycle, defaultErrorMessageCall, defineEnumProp, defineEnumProps, defineProp, defineProps, difference, drop, dropWhile, dropWhileEnd, elem, elemIndex, elemIndices, equal, equalAll, error, errorIfNotType, errorIfNotTypes, fPureTakes2, fPureTakes3, fPureTakes4, fPureTakes5, fPureTakesOne, fPureTakesOneOrMore, filter$1 as filter, find, findIndex, findIndexWhere, findIndexWhereRight, findIndices, findIndicesWhere, findWhere, flip, flip3, flip4, flip5, flipN, fnOrError, foldl, foldl1, foldr, foldr1, forEach$1 as forEach, fromAssocList, fromAssocListDeep, genericAscOrdering, getErrorIfNotTypeThrower, getErrorIfNotTypesThrower, group, groupBy, hasOwnProperty, head, id, includes, indexOf, init, inits, insert, insertBy, instanceOf, instanceOfOne, intercalate, intersect, intersectBy, intersperse, isArray, isBoolean, isCallable, isClass, isEmpty, isEmptyCollection, isEmptyList, isEmptyObject, isFalsy, isFunction, isFunctor, isInfixOf, isLoosely, isLooselyOneOf, isMap, isNull, isNumber, isObject, isOfType, isOneOf, isPrefixOf, isSet, isStrictly, isStrictlyOneOf, isString, isSubsequenceOf, isSuffixOf, isSymbol, isTruthy, isType, isUndefined, isUsableImmutablePrimitive, isWeakMap, isWeakSet, isset, iterate, jsPlatform, jsonClone, keys, last, lastIndex, lastIndexOf, lcaseFirst, length, lengths, lines, log, lookup, map$1 as map, mapAccumL, mapAccumR, maximum, minimum, native, negateF, negateF2, negateF3, negateFN, noop, not, notElem, nub, nubBy, objComplement, objDifference, objIntersect, objUnion, of, or, partition, peek, permutations, product, push, range, reduce$1 as reduce, reduceRight$1 as reduceRight, reduceUntil, reduceUntilRight, remove, removeBy, removeFirstsBy, repeat, replicate, reverse$1 as reverse, scanl, scanl1, scanr, scanr1, searchObj, slice, sliceCopy, sliceFrom, sliceTo, sort, sortBy, sortOn, span, split, splitAt, stripPrefix, subsequences, sum, swapped, tail, tails, take, takeWhile, toArray, toAssocList, toAssocListDeep, toEnumerableDescriptor, toFunction, toShortest, toTargetDescriptorTuple, toTypeRef, toTypeRefName, toTypeRefNames, toTypeRefs, trampoline, transpose, typeOf, typeRefsToStringOrError, ucaseFirst, uncons, unconsr, unfoldr, union, unionBy, unlines, until, unwords, unzip, unzipN, warn, words, zip, zip3, zip4, zip5, zipN, zipWith, zipWith3, zipWith4, zipWith5, zipWithN };\n//# sourceMappingURL=fjl.mjs.map\n","import { repeat, curry, isFunction, call, isString, assignDeep, defineEnumProps, typeOf, toTypeRefName, defineEnumProp, isEmpty } from 'fjl';\n\n/**\r\n * Created by Ely on 7/21/2014.\r\n * Initial idea borrowed from Zend Framework 2's Zend/Validator\r\n * @module ValidationUtils\r\n */\nconst \n/**\r\n * Default value obscurator.\r\n * @function module:ValidationUtils.defaultValueObscurator\r\n * @param x {*} - Value to obscurate.\r\n * @returns {String} - Obscurated value.\r\n */\ndefaultValueObscurator = x => repeat((x + '').length, '*'),\n\n/**\r\n * Gets an error message by `messageTemplates` key from `options` object.\r\n * @function module:ValidationUtils.getErrorMsgByKey\r\n * @param options {Object}\r\n * @param key {(String|Function)}\r\n * @param value {*}\r\n * @returns {String|undefined} - Error message if successfully resolved one else `undefined`.\r\n * @curried\r\n */\ngetErrorMsgByKey = curry((options, key, value) => {\n  let message;\n\n  const {\n    messageTemplates,\n    valueObscured,\n    valueObscurator\n  } = options,\n        _value = valueObscured ? valueObscurator(value) : value;\n\n  if (isFunction(key)) {\n    message = call(key, _value, options);\n  } else if (!isString(key) || !messageTemplates || !messageTemplates[key]) {\n    return;\n  } else if (isFunction(messageTemplates[key])) {\n    message = call(messageTemplates[key], _value, options);\n  } else {\n    message = messageTemplates[key];\n  }\n\n  return message;\n}),\n\n/**\r\n * Returns a strongly typed/normalized ValidatorOptions object.\r\n * @function module:ValidationUtils.toValidationOptions\r\n * @param options {...Object}\r\n * @returns {Object}\r\n */\ntoValidationOptions = (...options) => assignDeep(defineEnumProps([[Object, 'messageTemplates', {}], [Boolean, 'valueObscured', false], [Function, 'valueObscurator', defaultValueObscurator]], {}), ...(options.length ? options : [{}])),\n\n/**\r\n * Returns a strongly typed, normalized validation result object.\r\n * @function module:ValidationUtils.toValidationResult\r\n * @param options {...Object}\r\n * @returns {*}\r\n */\ntoValidationResult = (...options) => assignDeep(defineEnumProps([[Boolean, 'result', false], [Array, 'messages', []]], {}), {\n  value: undefined\n}, ...(options.length ? options : [{}])),\n      isOneOf = (x, ...types) => {\n  const typeName = typeOf(x);\n  return types.map(toTypeRefName).some(name => typeName === name);\n};\n\n/**\r\n * Created by Ely on 7/21/2014.\r\n * Module for validating a value by regular expression.\r\n * @module regexValidator\r\n */\nconst \n/**\r\n * Normalizes `regexValidator` options.\r\n * @function module:regexValidator.toRegexValidatorOptions\r\n * @param options {Object}\r\n * @returns {Object}\r\n */\ntoRegexValidatorOptions = options => {\n  const [_options] = defineEnumProp(RegExp, toValidationOptions(), 'pattern', /./);\n  _options.messageTemplates = {\n    DOES_NOT_MATCH_PATTERN: (value, ops) => 'The value passed in does not match pattern\"' + ops.pattern + '\".  Value passed in: \"' + value + '\".'\n  };\n  return options ? assignDeep(_options, options) : _options;\n},\n\n/**\r\n * Same as `regexValidator` except this version is not curried and doesn't normalize incoming `options` parameter.\r\n * @note Useful when the user has a need for calling `toRegexValidatorOptions`\r\n *  externally/from-outside-the-`regexValidator` call (helps to remove that one extra call in this case (since\r\n *  `regexValidator` calls `toRegexValidatorOptions` internally)).\r\n * @function module:regexValidator.regexValidatorNoNormalize\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {*}\r\n */\nregexValidatorNoNormalize = curry((options, value) => {\n  const result = options.pattern.test(value),\n        // If test failed\n  messages = !result ? [getErrorMsgByKey(options, 'DOES_NOT_MATCH_PATTERN', value)] : [];\n  return toValidationResult({\n    result,\n    messages,\n    value\n  });\n}),\n\n/**\r\n * Validates a value with the regex `pattern` option passed in.\r\n * @function module:regexValidator.regexValidator\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {Object}\r\n */\nregexValidator = curry((options, value) => regexValidatorNoNormalize(toRegexValidatorOptions(options), value));\n\n/**\r\n * Created by Ely on 1/21/2015.\r\n * Module for validating alpha-numeric values.\r\n * @module alnumValidator\r\n */\nconst \n/**\r\n * @function module:alnumValidator.alnumValidator\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {Object}\r\n */\nalnumValidator = curry((options, value) => regexValidator(assignDeep({\n  pattern: /^[\\da-z]+$/i,\n  messageTemplates: {\n    DOES_NOT_MATCH_PATTERN: x => `Value is not alpha-numeric.  Value received: '${x}'.`\n  }\n}, options), value)),\n\n/**\r\n * Same as `alnumValidator` though doesn't-require-`options`/ignores parameter.\r\n * @function module:alnumValidator.alnumValidator1\r\n * @param value {*}\r\n * @returns {Object}\r\n */\nalnumValidator1 = value => alnumValidator(null, value);\n\n/**\r\n * Created by Ely on 1/21/2015.\r\n * Module for validating digits.\r\n * @module digitValidator\r\n */\nconst \n/**\r\n * @function module:digitValidator.digitValidator\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {Object}\r\n */\ndigitValidator = curry((options, value) => regexValidator(assignDeep({\n  pattern: /^\\d+$/,\n  messageTemplates: {\n    DOES_NOT_MATCH_PATTERN: x => `The value passed in contains non digital characters.  ` + `Value received: \"${x}\".`\n  }\n}, options), value)),\n\n/**\r\n * Same as `digitValidator` though doesn't-require/ignores `options` parameter.\r\n * @function module:digitValidator.digitValidator1\r\n * @param value {*}\r\n * @returns {Object}\r\n */\ndigitValidator1 = value => digitValidator(null, value);\n\n/**\r\n * Created by Ely on 1/21/2015.\r\n * @module lengthValidator\r\n * @todo Allow validator option generators to receive `zero` object (object on which to extend on).\r\n * @todo Allow validator option generators to receive more than one options object.\r\n */\nconst \n/**\r\n * Normalizes `lengthValidator` options.\r\n * @function module:lengthValidator.toLengthOptions\r\n * @param options {Object}\r\n * @returns {Object}\r\n */\ntoLengthOptions = options => {\n  const _options = defineEnumProps([[Number, 'min', 0], [Number, 'max', Number.MAX_SAFE_INTEGER]], toValidationOptions());\n\n  _options.messageTemplates = {\n    NOT_OF_TYPE: value => `Value does not have a \\`length\\` property.  ` + `Type received: \\`${typeOf(value)}\\`.  ` + `Value received: \\`${value}\\`.`,\n    NOT_WITHIN_RANGE: (value, ops) => `Value's length is not within range ` + `${ops.min} to ${ops.max}.  ` + `Evaluated length is \\`${value.length}\\`.  ` + `Value received: \\`${value}\\`.`\n  };\n  return options ? assignDeep(_options, options) : _options;\n},\n\n/**\r\n * Validates whether given value has a length and whether length is between\r\n *  given range (if given) but doesn't normalize options.\r\n *  (@see `toLengthOptions` for range props).\r\n * @function module:lengthValidator.lengthValidatorNoNormalize\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {Object}\r\n */\nlengthValidatorNoNormalize = curry((options, value) => {\n  const messages = [];\n  let valLength,\n      isWithinRange,\n      result = false;\n\n  if (isOneOf(value, 'Null', 'Undefined', 'NaN', 'Symbol') || !value.hasOwnProperty('length')) {\n    messages.push(getErrorMsgByKey(options, 'NOT_OF_TYPE', value));\n    return toValidationResult({\n      result,\n      messages,\n      value\n    });\n  }\n\n  valLength = value.length;\n  isWithinRange = valLength >= options.min && valLength <= options.max;\n\n  if (!isWithinRange) {\n    messages.push(getErrorMsgByKey(options, 'NOT_WITHIN_RANGE', value));\n  } else {\n    result = true;\n  }\n\n  return toValidationResult({\n    result,\n    messages,\n    value\n  });\n}),\n\n/**\r\n * Validates whether given value has a length and whether length is between\r\n *  given range (if given).  Same as `lengthValidatorNoNormalize` except normalizes incoming options.\r\n *  (@see `toLengthOptions` for more on options).\r\n * @function module:lengthValidator.lengthValidator\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {Object}\r\n */\nlengthValidator = curry((options, value) => {\n  return lengthValidatorNoNormalize(toLengthOptions(options), value);\n});\n\n/**\r\n * Created by Ely on 7/21/2014.\r\n * @module notEmptyValidator\r\n */\nconst \n/**\r\n * Normalizes incoming options so that they are valid `notEmptyValidator` options.\r\n * @note currently `notEmptyValidator` only takes the `messageTemplates` option (may\r\n *  have more options in the future).\r\n * @function module:notEmptyValidator.toNotEmptyOptions\r\n * @param options {Object}\r\n * @returns {Object}\r\n */\ntoNotEmptyOptions = options => toValidationOptions({\n  messageTemplates: {\n    EMPTY_NOT_ALLOWED: () => 'Empty values are not allowed.'\n  }\n}, options),\n\n/**\r\n * Validates whether incoming `value` is empty* or not also doesn't normalize the passed in\r\n * options parameter (since currently `notEmptyValidator` has no options other than it's `messageTemplates`\r\n * field). * 'empty' in our context means one of `null`, `undefined`, empty lists (strings/arrays) (`x.length === 0`), `false`, empty object (obj with `0` enumerable props), and empty collection/iterable object (`Map`, `Set` etc.), NaN,\r\n * Also this method is useful when the user, themselves, have to call `toNotEmptyOptions` for a specific reason.\r\n * @function module:notEmptyValidator.notEmptyValidatorNoNormalize\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {*}\r\n */\nnotEmptyValidatorNoNormalize = curry((options, value) => {\n  const result = isEmpty(value),\n        // If test failed\n  messages = result ? [getErrorMsgByKey(options, 'EMPTY_NOT_ALLOWED', value)] : [];\n  return toValidationResult({\n    result: !result,\n    messages,\n    value\n  });\n}),\n\n/**\r\n * Returns a validation result indicating whether give `value`\r\n * is an empty* value or not (*@see `notEmptyValidatorNoNormalize` for more about\r\n * empties).\r\n * @function module:notEmptyValidator.notEmptyValidator\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {Object}\r\n */\nnotEmptyValidator = curry((options, value) => notEmptyValidatorNoNormalize(toNotEmptyOptions(options), value)),\n\n/**\r\n * Same as `notEmptyValidator` except doesn't require first parameter (\"options\" parameter). (*@see `notEmptyValidatorNoNormalize` for more about\r\n * empties).\r\n * @function module:notEmptyValidator.notEmptyValidator1\r\n * @param value {*}\r\n * @returns {Object}\r\n */\nnotEmptyValidator1 = value => notEmptyValidatorNoNormalize(null, value);\n\n/**\r\n * Created by Ely on 1/21/2015.\r\n * @module stringLengthValidator\r\n */\nconst \n/**\r\n * Normalizes (ensures has expected properties) `stringLengthValidator`'s options.\r\n * @function module:stringLengthValidator.toStringLengthOptions\r\n * @param options {Object}\r\n * @returns {Object}\r\n */\ntoStringLengthOptions = options => {\n  const _options = {\n    messageTemplates: {\n      NOT_OF_TYPE: value => `Value is not a String.  ` + `Value type received: ${typeOf(value)}.  ` + `Value received: \"${value}\".`\n    }\n  };\n  return toLengthOptions(options ? assignDeep(_options, options) : _options);\n},\n\n/**\r\n * Same as `stringLengthValidator` except doesn't normalize the incoming options.\r\n * Useful for cases where you have to call `toStringLengthValidator` options from outside of the `stringLengthValidator` call (\r\n *  helps eliminate one call in this case).  Also useful for extreme cases (cases where you have hundreds of validators\r\n *  and want to pull out every ounce of performance from them possible).\r\n * @function module:stringLengthValidator.stringLengthValidatorNoNormalize\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {Object}\r\n */\nstringLengthValidatorNoNormalize = curry((options, value) => {\n  const messages = [],\n        isOfType = isString(value),\n        valLength = isOfType ? value.length : 0,\n        isWithinRange = valLength >= options.min && valLength <= options.max;\n\n  if (!isOfType) {\n    messages.push(getErrorMsgByKey(options, 'NOT_OF_TYPE', value));\n  } else if (!isWithinRange) {\n    messages.push(getErrorMsgByKey(options, 'NOT_WITHIN_RANGE', value));\n  }\n\n  return toValidationResult({\n    result: isOfType && isWithinRange,\n    messages,\n    value\n  });\n}),\n\n/**\r\n * @function module:stringLengthValidator.stringLengthValidator\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {Object}\r\n */\nstringLengthValidator = curry((options, value) => stringLengthValidatorNoNormalize(toStringLengthOptions(options), value));\n\n/**\r\n * @module fjlValidator\r\n */\n\nexport { alnumValidator, alnumValidator1, defaultValueObscurator, digitValidator, digitValidator1, getErrorMsgByKey, isOneOf, lengthValidator, lengthValidatorNoNormalize, notEmptyValidator, notEmptyValidator1, notEmptyValidatorNoNormalize, regexValidator, regexValidatorNoNormalize, stringLengthValidator, stringLengthValidatorNoNormalize, toLengthOptions, toNotEmptyOptions, toRegexValidatorOptions, toStringLengthOptions, toValidationOptions, toValidationResult };\n//# sourceMappingURL=fjl-validator.mjs.map\n","/**\r\n * Created by elydelacruz on 6/10/16.\r\n * @module fjlValidatorReCaptcha\r\n * @recaptchaVersion v2\r\n * @reference see below:\r\n * @see https://developers.google.com/recaptcha/docs/\r\n * @see https://developers.google.com/recaptcha/docs/verify\r\n * @todo Request handlers should be separated out from inlined definitions\r\n */\r\nimport https from 'https';\r\nimport querystring from 'querystring';\r\nimport {getErrorMsgByKey as getErrorMessageByKey, toValidationResult, toValidationOptions} from 'fjl-validator';\r\nimport {assign, assignDeep, isEmpty, curry, flip, defineEnumProps} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * @memberOf module:fjlValidatorReCaptcha\r\n     * @property MISSING_INPUT_SECRET\r\n     * @type {string}\r\n     */\r\n    MISSING_INPUT_SECRET = 'missing-input-secret',\r\n\r\n    /**\r\n     * @memberOf module:fjlValidatorReCaptcha\r\n     * @property INVALID_INPUT_SECRET\r\n     * @type {string}\r\n     */\r\n    INVALID_INPUT_SECRET = 'invalid-input-secret',\r\n\r\n    /**\r\n     * @memberOf module:fjlValidatorReCaptcha\r\n     * @property MISSING_INPUT_RESPONSE\r\n     * @type {string}\r\n     */\r\n    MISSING_INPUT_RESPONSE = 'missing-input-response',\r\n\r\n    /**\r\n     * @memberOf module:fjlValidatorReCaptcha\r\n     * @property INVALID_INPUT_RESPONSE\r\n     * @type {string}\r\n     */\r\n    INVALID_INPUT_RESPONSE = 'invalid-input-response',\r\n\r\n    /**\r\n     * @memberOf module:fjlValidatorReCaptcha\r\n     * @proerpty BAD_REQUEST\r\n     * @type {string}\r\n     */\r\n    BAD_REQUEST = 'bad-request',\r\n\r\n    /**\r\n     * @memberOf module:fjlValidatorReCaptcha\r\n     * @property UNKNOWN_ERROR\r\n     * @type {string}\r\n     */\r\n    UNKNOWN_ERROR = 'unknown-error',\r\n\r\n    /**\r\n     * Normalizes value object to be tested by `reCaptchaValidator`.\r\n     * @function module:fjlValidatorReCaptcha.toReCaptchaTestValue\r\n     * @param incoming {Object} - Incoming 'un-normalized' test value object; E.g. `{secret: '', resonse: '', etc...}`\r\n     * @param [outgoing={}]{Object} - Optional.  Outgoing object to apply enumerable prop getters and setters to.\r\n     * @returns {ReCaptchaTestValue} - In the form of `{secret, response, remoteip}`.\r\n     * @throws {Error} - If any of `secret`, `response`, or `remoteip` are passed in with values\r\n     *  containing anything other than values of type String.\r\n     */\r\n    toReCaptchaTestValue = (incoming, outgoing = {}) =>\r\n        assign(defineEnumProps([\r\n            [String, 'secret'],\r\n            [String, 'remoteip'],\r\n            [String, 'response']\r\n        ], outgoing), incoming),\r\n\r\n    /**\r\n     * Normalizes value object to be tested by `reCaptchaValidator`.\r\n     * @function module:fjlValidatorReCaptcha.toReCaptchaValidatorOptions\r\n     * @param options {Object} - Incoming 'un-normalized' test value object; E.g. `{secret: '', resonse: '', etc...}`\r\n     * @param [outgoing={}]{Object} - Optional.  Outgoing object to apply enumerable prop getters and setters to.\r\n     * @returns {ReCaptchaValidatorOptions} - `{requestOptions {Object}, messageTemplates {Object}}`.\r\n     * @throws {Error} - If any of the passed object's properties do not match expected types.\r\n     */\r\n    toReCaptchaValidatorOptions = (options, outgoing = {}) =>\r\n         // @note `toValidationOptions` sets getter and setter for 'messageTemplates', 'valueObscured', and `valueObscurer`\r\n        assignDeep(\r\n            defineEnumProps([[Object, 'requestOptions', {}]], toValidationOptions(outgoing)),\r\n            {\r\n                requestOptions: {\r\n                    host: 'www.google.com',\r\n                    path: '/recaptcha/api/siteverify',\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/x-www-form-urlencoded'\r\n                    }\r\n                },\r\n                messageTemplates: {\r\n                    [MISSING_INPUT_SECRET]: 'The secret parameter is missing.',\r\n                    [INVALID_INPUT_SECRET]: 'The secret parameter is invalid or malformed.',\r\n                    [MISSING_INPUT_RESPONSE]: 'The response parameter is missing.',\r\n                    [INVALID_INPUT_RESPONSE]: 'The response parameter is invalid or malformed.',\r\n                    [BAD_REQUEST]: 'Bad request',\r\n                    [UNKNOWN_ERROR]: 'Unknown error.'\r\n                }\r\n            },\r\n            options || {}\r\n        ),\r\n\r\n    /**\r\n     * Makes request to reCaptchaV2 service using passed in options and test value.\r\n     * @function module:fjlValidatorReCaptcha.makeReCaptchaRequest$\r\n     * @param options {ReCaptchaValidatorOptions}\r\n     * @param value {ReCaptchaTestValue}\r\n     * @param resolve {Function} - Resolve/success callback - Receives validation result object.\r\n     * @param reject {Function} - Reject/failure callback - Receives validation result object and errorCodes array.\r\n     * @returns {void}\r\n     */\r\n    makeReCaptchaRequest$ = (options, value, resolve, reject) => {\r\n        const messages = [],\r\n            {secret, remoteip, response} = value;\r\n\r\n        if (!secret) {\r\n            messages.push(getErrorMessageByKey(options, MISSING_INPUT_SECRET, value));\r\n        }\r\n        if (!response) {\r\n            messages.push(getErrorMessageByKey(options, MISSING_INPUT_RESPONSE, value));\r\n        }\r\n        if (messages.length) {\r\n            resolve(toValidationResult({result: false, messages}));\r\n            return; // Exiting explicitly here due to function being able to be used in callback style (old-style)\r\n        }\r\n\r\n        const formParams = {secret, remoteip, response},\r\n            {requestOptions} = options,\r\n            serializedParams = querystring.stringify(formParams);\r\n\r\n        // Set content-length header\r\n        requestOptions.headers['Content-Length'] = serializedParams.length;\r\n        requestOptions.body = serializedParams;\r\n\r\n        // Make request\r\n        const validationResult = toValidationResult(),\r\n            request = https.request(requestOptions, res => { // handle `response` (`res`)\r\n                let body = '';\r\n                res.setEncoding('utf8');\r\n                res.on('data', chunk => {\r\n                    body += chunk;\r\n                });\r\n                res.on('end', () => {\r\n                    let responseData = JSON.parse(body),\r\n                        errorCodes = responseData['error-codes'],\r\n                        hasErrorCodes = !!errorCodes && !!errorCodes.length,\r\n                        normalizedErrorCodes = hasErrorCodes ? errorCodes.map(x => x.toLowerCase()) : [],\r\n                        nonEmptyErrorCodes = [];\r\n\r\n                    // If validation failed (false, null, undefined)\r\n                    if (!isEmpty(responseData.success)) {\r\n                        validationResult.result = true;\r\n                        resolve(validationResult);\r\n                        return;\r\n                    }\r\n\r\n                    if (hasErrorCodes) {\r\n                        // Add error message(s)\r\n                        nonEmptyErrorCodes =\r\n                            normalizedErrorCodes.filter(code =>\r\n                                options.messageTemplates.hasOwnProperty(code));\r\n\r\n                        // Get error messages\r\n                        if (!nonEmptyErrorCodes.length) {\r\n                            messages.push(getErrorMessageByKey(options, UNKNOWN_ERROR, value));\r\n                        }\r\n\r\n                        // Else add 'unknown error' error message\r\n                        else {\r\n                            nonEmptyErrorCodes.forEach(code =>\r\n                                messages.push(getErrorMessageByKey(options, code, value)));\r\n                        }\r\n                    }\r\n                    else {\r\n                        messages.push(getErrorMessageByKey(options, UNKNOWN_ERROR, value));\r\n                    }\r\n\r\n                    // Set failure results\r\n                    validationResult.result = false;\r\n                    validationResult.messages = messages;\r\n                    resolve(validationResult, nonEmptyErrorCodes);\r\n                });\r\n            });\r\n        request.on('error', err => {\r\n            messages.push(err);\r\n            validationResult.messages = messages;\r\n            validationResult.result = false;\r\n            reject(validationResult, err);\r\n        });\r\n        request.write(serializedParams, 'utf8');\r\n        request.end();\r\n    },\r\n\r\n    /**\r\n     * Validates a test value against google's reCaptchaV2 backend validation service;\r\n     * @note unlike `makeReCaptchaRequest$` this method validates/normalizes the passed in data objects before making\r\n     * the validation request to the backend-validation-service.\r\n     * @function module:fjlValidatorReCaptcha.reCaptchaValidator$\r\n     * @param options {ReCaptchaValidatorOptions}\r\n     * @param value {ReCaptchaTestValue}\r\n     * @param resolve {Function} - Resolve/success callback - Receives validation result object.\r\n     * @param reject {Function} - Reject/failure callback - Receives validation result object and errorCodes array.\r\n     * @returns {void}\r\n     */\r\n    reCaptchaValidator$ = (options, value, resolve, reject) =>\r\n        makeReCaptchaRequest$(\r\n            toReCaptchaValidatorOptions(options),\r\n            toReCaptchaTestValue(value),\r\n            resolve, reject\r\n        ),\r\n\r\n    /**\r\n     * Validates a test value against reCaptchaV2 backend service;\r\n     * @note When a reject occurs it will receive validation result object and `errorCodes` array (which contains\r\n     *  error code sent back by reCaptcha service.\r\n     * @function module:fjlValidatorReCaptcha.reCaptchaIOValidator$\r\n     * @param options {ReCaptchaValidatorOptions}\r\n     * @param value {ReCaptchaTestValue}\r\n     * @returns {(Promise.<ValidationResult>|Promise.<ValidationResult, Array.<String>>)}\r\n     */\r\n    reCaptchaIOValidator$ = (options, value) =>\r\n        (new Promise((resolve, reject) =>\r\n            reCaptchaValidator$(options, value, resolve, reject))\r\n        ),\r\n\r\n    /**\r\n     * Curried version of `reCaptchaIOValidator$`.\r\n     * @function module:fjlValidatorReCaptcha.reCaptchaIOValidator\r\n     * @param options {ReCaptchaValidatorOptions}\r\n     * @param value {ReCaptchaTestValue}\r\n     * @returns {(Promise.<ValidationResult>|Promise.<ValidationResult, Array.<String>>)}\r\n     * @curried - Is curried.\r\n     */\r\n    reCaptchaIOValidator = curry(reCaptchaIOValidator$),\r\n\r\n    /**\r\n     * Alias of `reCaptchaIOValidator`.\r\n     * @function module:fjlValidatorReCaptcha.reCaptchaValidator\r\n     * @param options {ReCaptchaValidatorOptions}\r\n     * @param value {ReCaptchaTestValue}\r\n     * @returns {(Promise.<ValidationResult>|Promise.<ValidationResult, Array.<String>>)}\r\n     * @curried - Is curried.\r\n     */\r\n    reCaptchaValidator = reCaptchaIOValidator,\r\n\r\n    /**\r\n     * Same as `reCaptchaIOValidator` though with arguments flipped;\r\n     *  Takes `value` parameter first and the `options` one second.\r\n     * @function module:fjlValidatorReCaptcha.reCaptchaValidatorV2\r\n     * @param value {ReCaptchaTestValue}\r\n     * @param options {ReCaptchaValidatorOptions}\r\n     * @returns {(Promise.<ValidationResult>|Promise.<ValidationResult, Array.<String>>)}\r\n     * @curried - Is curried.\r\n     */\r\n    reCaptchaValidatorV2 = curry(flip(reCaptchaIOValidator$));\r\n\r\n/*-------------------\r\n * VIRTUAL TYPES\r\n * @note 'reCaptcha-v2 backend service' is the backend validation service used to validate, from a backend,\r\n *  the frontend validation result (for reCaptchaV2).\r\n *-------------------*/\r\n\r\n/**\r\n * @typedef {Object.<String, (Function|String)>} MessageTemplates\r\n * Message Templates object to get error messages from error codes received from the reCaptcha-v2 'backend' service.\r\n */\r\n\r\n/**\r\n * @typedef {Object.<String, *>} RequestOptions\r\n * Options used to make request to google's reCaptcha-v2 backend-validation service.\r\n */\r\n\r\n/**\r\n * @typedef {Object.<String, *>} ReCaptchaValidatorOptions\r\n * @property requestOptions {RequestOptions}\r\n * @property messageTemplates {MessageTemplates}\r\n */\r\n\r\n/**\r\n * @typedef {Object.<String, String>} ReCaptchaTestValue\r\n * @property {String} secret - The 'secret' key sent to the google reCaptcha-v2 backend service.\r\n * @property {String} response - The 'response' string sent to the reCaptcha-v2 backend service.\r\n * @property {String} [remoteip=undefined] - Optional.  The 'remoteip' string sent to the reCaptcha-v2 backend-validation service.\r\n */\r\n\r\n/**\r\n * @typedef {Object.<String, *>} ValidationResult\r\n * @property {Boolean} result - Result of validators validation (`true` or `false`).\r\n * @property {Array.<String>} messages - Validation failure messages;  Reasons why tested value(s) didn't pass validation.\r\n * @type {string}\r\n */\r\n"],"names":["MISSING_INPUT_SECRET","INVALID_INPUT_SECRET","MISSING_INPUT_RESPONSE","INVALID_INPUT_RESPONSE","BAD_REQUEST","UNKNOWN_ERROR","toReCaptchaTestValue","incoming","outgoing","assign","defineEnumProps","String","toReCaptchaValidatorOptions","options","assignDeep","Object","toValidationOptions","requestOptions","host","path","method","headers","messageTemplates","makeReCaptchaRequest$","value","resolve","reject","messages","secret","remoteip","response","push","getErrorMessageByKey","length","toValidationResult","result","formParams","serializedParams","querystring","stringify","body","validationResult","request","https","res","setEncoding","on","chunk","responseData","JSON","parse","errorCodes","hasErrorCodes","normalizedErrorCodes","map","x","toLowerCase","nonEmptyErrorCodes","isEmpty","success","filter","code","hasOwnProperty","forEach","err","write","end","reCaptchaValidator$","reCaptchaIOValidator$","Promise","reCaptchaIOValidator","curry","reCaptchaValidator","reCaptchaValidatorV2","flip"],"mappings":"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"}